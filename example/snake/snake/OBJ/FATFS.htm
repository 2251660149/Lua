<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\FATFS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\FATFS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Sun Sep 30 13:55:11 2018
<BR><P>
<H3>Maximum Stack Usage =       2672 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
luaY_parser &rArr; chunk &rArr; statement &rArr; assignment &rArr;  assignment (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[128]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2e]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[16]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">BusFault_Handler</a><BR>
 <LI><a href="#[14]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">HardFault_Handler</a><BR>
 <LI><a href="#[17c]">luaM_toobig</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27e]">luaG_runerror</a><BR>
 <LI><a href="#[1d7]">reallymarkobject</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d7]">reallymarkobject</a><BR>
 <LI><a href="#[28c]">luaF_freeupval</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17b]">luaM_realloc_</a><BR>
 <LI><a href="#[2e6]">luaD_seterrorobj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[184]">luaS_newlstr</a><BR>
 <LI><a href="#[2a0]">luaD_reallocCI</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17b]">luaM_realloc_</a><BR>
 <LI><a href="#[319]">luaV_concat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27e]">luaG_runerror</a><BR>
 <LI><a href="#[2f4]">luaG_typeerror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27e]">luaG_runerror</a><BR>
 <LI><a href="#[14f]">luaD_call</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27e]">luaG_runerror</a><BR>
 <LI><a href="#[2db]">sweeplist</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2db]">sweeplist</a><BR>
 <LI><a href="#[14d]">GCTM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14f]">luaD_call</a><BR>
 <LI><a href="#[2e1]">luaV_execute</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[323]">luaV_settable</a><BR>
 <LI><a href="#[2ad]">luaG_ordererror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27e]">luaG_runerror</a><BR>
 <LI><a href="#[205]">call_orderTM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[203]">callTMres</a><BR>
 <LI><a href="#[325]">luaV_gettable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27e]">luaG_runerror</a><BR>
 <LI><a href="#[321]">luaV_equalval</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[203]">callTMres</a><BR>
 <LI><a href="#[302]">newkey</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bc]">luaH_set</a><BR>
 <LI><a href="#[301]">resize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c8]">luaH_setnum</a><BR>
 <LI><a href="#[2fe]">setnodevector</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27e]">luaG_runerror</a><BR>
 <LI><a href="#[29f]">growCI</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27e]">luaG_runerror</a><BR>
 <LI><a href="#[136]">Arith</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13f]">call_binTM</a><BR>
 <LI><a href="#[15]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">MemManage_Handler</a><BR>
 <LI><a href="#[17]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">UsageFault_Handler</a><BR>
 <LI><a href="#[179]">LoadConstants</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17e]">LoadFunction</a><BR>
 <LI><a href="#[20f]">save</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[259]">luaX_lexerror</a><BR>
 <LI><a href="#[33f]">singlevaraux</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33f]">singlevaraux</a><BR>
 <LI><a href="#[264]">subexpr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[264]">subexpr</a><BR>
 <LI><a href="#[334]">yindex</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[232]">expr</a><BR>
 <LI><a href="#[28f]">funcargs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d2]">explist1</a><BR>
 <LI><a href="#[239]">recfield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[232]">expr</a><BR>
 <LI><a href="#[238]">listfield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[232]">expr</a><BR>
 <LI><a href="#[1ce]">primaryexp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[232]">expr</a><BR>
 <LI><a href="#[1f6]">body</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f4]">chunk</a><BR>
 <LI><a href="#[33b]">repeatstat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f4]">chunk</a><BR>
 <LI><a href="#[1f2]">block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f4]">chunk</a><BR>
 <LI><a href="#[1cb]">assignment</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1cb]">assignment</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2e]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[68]">GetKey</a> from main.o(i.GetKey) referenced from main.o(i.do_file_script)
 <LI><a href="#[14]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[66]">LCD_print</a> from main.o(i.LCD_print) referenced from main.o(.constdata)
 <LI><a href="#[66]">LCD_print</a> from main.o(i.LCD_print) referenced from main.o(i.do_file_script)
 <LI><a href="#[11]">MM2</a> from main.o(i.MM2) referenced 4 times from main.o(.data)
 <LI><a href="#[15]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">Nothing</a> from main.o(i.Nothing) referenced 12 times from main.o(.data)
 <LI><a href="#[1d]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">SDIO_IRQHandler</a> from platform_mmc.o(i.SDIO_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6a]">Setrand</a> from main.o(i.Setrand) referenced from main.o(i.do_file_script)
 <LI><a href="#[1b]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[58]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[1e]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[78]">_LCD_Clear</a> from main.o(i._LCD_Clear) referenced from main.o(.constdata)
 <LI><a href="#[67]">_LCD_Fill</a> from main.o(i._LCD_Fill) referenced from main.o(i.do_file_script)
 <LI><a href="#[6b]">_LCD_ShowNum</a> from main.o(i._LCD_ShowNum) referenced from main.o(i.do_file_script)
 <LI><a href="#[96]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[69]">_delay_ms</a> from main.o(i._delay_ms) referenced from main.o(i.do_file_script)
 <LI><a href="#[5a]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[5c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[5f]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[5e]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[5b]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[76]">f_call</a> from lapi.o(i.f_call) referenced from lapi.o(i.lua_pcall)
 <LI><a href="#[75]">f_luaopen</a> from lstate.o(i.f_luaopen) referenced from lstate.o(i.lua_newstate)
 <LI><a href="#[70]">f_parser</a> from ldo.o(i.f_parser) referenced from ldo.o(i.luaD_protectedparser)
 <LI><a href="#[5d]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[6f]">generic_reader</a> from lbaselib.o(i.generic_reader) referenced from lbaselib.o(i.luaB_load)
 <LI><a href="#[72]">getF</a> from lauxlib.o(i.getF) referenced from lauxlib.o(i.luaL_loadfile)
 <LI><a href="#[71]">getS</a> from lauxlib.o(i.getS) referenced from lauxlib.o(i.luaL_loadbuffer)
 <LI><a href="#[61]">ipairsaux</a> from lbaselib.o(i.ipairsaux) referenced from lbaselib.o(i.base_open)
 <LI><a href="#[60]">isspace</a> from isspace.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[73]">l_alloc</a> from lauxlib.o(i.l_alloc) referenced from lauxlib.o(i.luaL_newstate)
 <LI><a href="#[79]">luaB_assert</a> from lbaselib.o(i.luaB_assert) referenced from lbaselib.o(.constdata)
 <LI><a href="#[6e]">luaB_auxwrap</a> from lbaselib.o(i.luaB_auxwrap) referenced from lbaselib.o(i.luaB_cowrap)
 <LI><a href="#[90]">luaB_cocreate</a> from lbaselib.o(i.luaB_cocreate) referenced from lbaselib.o(.constdata)
 <LI><a href="#[7a]">luaB_collectgarbage</a> from lbaselib.o(i.luaB_collectgarbage) referenced from lbaselib.o(.constdata)
 <LI><a href="#[91]">luaB_coresume</a> from lbaselib.o(i.luaB_coresume) referenced from lbaselib.o(.constdata)
 <LI><a href="#[92]">luaB_corunning</a> from lbaselib.o(i.luaB_corunning) referenced from lbaselib.o(.constdata)
 <LI><a href="#[93]">luaB_costatus</a> from lbaselib.o(i.luaB_costatus) referenced from lbaselib.o(.constdata)
 <LI><a href="#[94]">luaB_cowrap</a> from lbaselib.o(i.luaB_cowrap) referenced from lbaselib.o(.constdata)
 <LI><a href="#[7b]">luaB_dofile</a> from lbaselib.o(i.luaB_dofile) referenced from lbaselib.o(.constdata)
 <LI><a href="#[7c]">luaB_error</a> from lbaselib.o(i.luaB_error) referenced from lbaselib.o(.constdata)
 <LI><a href="#[7d]">luaB_gcinfo</a> from lbaselib.o(i.luaB_gcinfo) referenced from lbaselib.o(.constdata)
 <LI><a href="#[7e]">luaB_getfenv</a> from lbaselib.o(i.luaB_getfenv) referenced from lbaselib.o(.constdata)
 <LI><a href="#[7f]">luaB_getmetatable</a> from lbaselib.o(i.luaB_getmetatable) referenced from lbaselib.o(.constdata)
 <LI><a href="#[62]">luaB_ipairs</a> from lbaselib.o(i.luaB_ipairs) referenced from lbaselib.o(i.base_open)
 <LI><a href="#[81]">luaB_load</a> from lbaselib.o(i.luaB_load) referenced from lbaselib.o(.constdata)
 <LI><a href="#[80]">luaB_loadfile</a> from lbaselib.o(i.luaB_loadfile) referenced from lbaselib.o(.constdata)
 <LI><a href="#[82]">luaB_loadstring</a> from lbaselib.o(i.luaB_loadstring) referenced from lbaselib.o(.constdata)
 <LI><a href="#[65]">luaB_newproxy</a> from lbaselib.o(i.luaB_newproxy) referenced from lbaselib.o(i.base_open)
 <LI><a href="#[63]">luaB_next</a> from lbaselib.o(i.luaB_next) referenced from lbaselib.o(.constdata)
 <LI><a href="#[63]">luaB_next</a> from lbaselib.o(i.luaB_next) referenced from lbaselib.o(i.base_open)
 <LI><a href="#[64]">luaB_pairs</a> from lbaselib.o(i.luaB_pairs) referenced from lbaselib.o(i.base_open)
 <LI><a href="#[83]">luaB_pcall</a> from lbaselib.o(i.luaB_pcall) referenced from lbaselib.o(.constdata)
 <LI><a href="#[84]">luaB_print</a> from lbaselib.o(i.luaB_print) referenced from lbaselib.o(.constdata)
 <LI><a href="#[85]">luaB_rawequal</a> from lbaselib.o(i.luaB_rawequal) referenced from lbaselib.o(.constdata)
 <LI><a href="#[86]">luaB_rawget</a> from lbaselib.o(i.luaB_rawget) referenced from lbaselib.o(.constdata)
 <LI><a href="#[87]">luaB_rawset</a> from lbaselib.o(i.luaB_rawset) referenced from lbaselib.o(.constdata)
 <LI><a href="#[88]">luaB_select</a> from lbaselib.o(i.luaB_select) referenced from lbaselib.o(.constdata)
 <LI><a href="#[89]">luaB_setfenv</a> from lbaselib.o(i.luaB_setfenv) referenced from lbaselib.o(.constdata)
 <LI><a href="#[8a]">luaB_setmetatable</a> from lbaselib.o(i.luaB_setmetatable) referenced from lbaselib.o(.constdata)
 <LI><a href="#[8b]">luaB_tonumber</a> from lbaselib.o(i.luaB_tonumber) referenced from lbaselib.o(.constdata)
 <LI><a href="#[8c]">luaB_tostring</a> from lbaselib.o(i.luaB_tostring) referenced from lbaselib.o(.constdata)
 <LI><a href="#[8d]">luaB_type</a> from lbaselib.o(i.luaB_type) referenced from lbaselib.o(.constdata)
 <LI><a href="#[8e]">luaB_unpack</a> from lbaselib.o(i.luaB_unpack) referenced from lbaselib.o(.constdata)
 <LI><a href="#[8f]">luaB_xpcall</a> from lbaselib.o(i.luaB_xpcall) referenced from lbaselib.o(.constdata)
 <LI><a href="#[95]">luaB_yield</a> from lbaselib.o(i.luaB_yield) referenced from lbaselib.o(.constdata)
 <LI><a href="#[6d]">luaU_undump</a> from lundump.o(i.luaU_undump) referenced from ldo.o(i.f_parser)
 <LI><a href="#[6c]">luaY_parser</a> from lparser.o(i.luaY_parser) referenced from ldo.o(i.f_parser)
 <LI><a href="#[74]">panic</a> from lauxlib.o(i.panic) referenced from lauxlib.o(i.luaL_newstate)
 <LI><a href="#[77]">resume</a> from ldo.o(i.resume) referenced from ldo.o(i.lua_resume)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[96]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[97]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[99]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[35a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[35b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[35c]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[35d]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[35e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9a]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[d1]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[9c]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[9e]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[35f]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[b6]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[360]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[361]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[362]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[363]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[364]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_lc_collate_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_collate_2 &rArr; _get_lc_collate
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_collate
</UL>

<P><STRONG><a name="[365]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[366]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_lc_monetary_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_monetary_2 &rArr; _get_lc_monetary
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_monetary
</UL>

<P><STRONG><a name="[367]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[368]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[369]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[36a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[36b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[36c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[36d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[36e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mmc_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[af]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000026))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_argv_1 &rArr; __ARM_argv_veneer &rArr; __ARM_get_argv &rArr; _handle_redirection &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mmc_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer
</UL>

<P><STRONG><a name="[36f]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[370]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[371]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[372]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[373]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[bb]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[b1]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mmc_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[374]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[375]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[376]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[377]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[378]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[379]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[98]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[37a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b3]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b5]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[37b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[b7]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; LCD_Init &rArr; LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[37c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[eb]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ba]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[37d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[bc]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1a6]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setrand
</UL>

<P><STRONG><a name="[b0]"></a>__ARM_argv_veneer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, argv_veneer.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = __ARM_argv_veneer &rArr; __ARM_get_argv &rArr; _handle_redirection &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mmc_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_argv_1
</UL>

<P><STRONG><a name="[37e]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[128]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[37f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[380]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2d
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[381]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[382]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_alloc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[c2]"></a>realloc</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, h1_realloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_alloc
</UL>

<P><STRONG><a name="[251]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[c5]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[c7]"></a>__2fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
</UL>

<P><STRONG><a name="[c9]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tostring
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>

<P><STRONG><a name="[106]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[cb]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[cd]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[ce]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[9b]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[cf]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[d2]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2d
</UL>

<P><STRONG><a name="[295]"></a>feof</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, feof.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getF
</UL>

<P><STRONG><a name="[108]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfile
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[d5]"></a>_do_fflush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fflush.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[d8]"></a>fflush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fflush.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[d9]"></a>fputs</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fputs &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
</UL>

<P><STRONG><a name="[d7]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[254]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
</UL>

<P><STRONG><a name="[db]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[383]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getc &rArr; fgetc &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfile
</UL>

<P><STRONG><a name="[f3]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_redirection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dup
</UL>

<P><STRONG><a name="[384]"></a>_ungetc_internal</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ungetc.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>ungetc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ungetc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfile
</UL>

<P><STRONG><a name="[e0]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mmc_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfile
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_redirection
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[e3]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mmc_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfile
</UL>

<P><STRONG><a name="[e1]"></a>_fclose_internal</STRONG> (Thumb, 102 bytes, Stack size 288 bytes, fclose_tmpfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mmc_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_tmpnam
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[118]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 288 bytes, fclose_tmpfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfile
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dup
</UL>

<P><STRONG><a name="[e8]"></a>localeconv</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, localeconv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = localeconv &rArr; _get_lconv
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lconv
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
</UL>

<P><STRONG><a name="[ea]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[a3]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[b9]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ec]"></a>strcoll</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, strcoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcoll
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
</UL>

<P><STRONG><a name="[25b]"></a>strerror</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
</UL>

<P><STRONG><a name="[20e]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_open
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_findtable
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
</UL>

<P><STRONG><a name="[314]"></a>strcspn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
</UL>

<P><STRONG><a name="[316]"></a>strncat</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
</UL>

<P><STRONG><a name="[31c]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
</UL>

<P><STRONG><a name="[315]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
</UL>

<P><STRONG><a name="[171]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locate2
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_findtable
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tostring
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_error
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushstr
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
</UL>

<P><STRONG><a name="[317]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_open
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlstr
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[ee]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[385]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_open
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newkey
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[386]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[387]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[388]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_close
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[389]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[ef]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
</UL>

<P><STRONG><a name="[ed]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_monetary
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_collate
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[38b]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>_main_redirection</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _main_redirect.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>_handle_redirection</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, _main_redirect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = _handle_redirection &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mmc_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dup
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
</UL>

<P><STRONG><a name="[2eb]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
</UL>

<P><STRONG><a name="[2ed]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>

<P><STRONG><a name="[38d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[38e]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[a5]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lconv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[38f]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[f7]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[a1]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[c3]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[391]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[fb]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[cc]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[392]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[ca]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[5b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[105]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[107]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[9f]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[c8]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[10c]"></a>_scanf_really_real</STRONG> (Thumb, 668 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[d4]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[113]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>

<P><STRONG><a name="[dd]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[114]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; mmc_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[d6]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mmc_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[117]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[f4]"></a>__dup</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, __dup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __dup &rArr; fclose
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_redirection
</UL>

<P><STRONG><a name="[119]"></a>_fisatty</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, __dup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>

<P><STRONG><a name="[ae]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mmc_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[b2]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mmc_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[e9]"></a>_get_lconv</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, _lconv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lconv
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
</UL>

<P><STRONG><a name="[f2]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_redirection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[11c]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[393]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[101]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[60]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[104]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[110]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[5e]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[fd]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[11e]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _readbuf &rArr; _sys_read &rArr; mmc_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[122]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, filbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[120]"></a>__filbuf</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[12d]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[394]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[287]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[395]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[11a]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[f8]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
</UL>

<P><STRONG><a name="[be]"></a>__ARM_get_argv</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, _get_argv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = __ARM_get_argv &rArr; _handle_redirection &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; mmc_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_command_string
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_redirection
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer
</UL>

<P><STRONG><a name="[b4]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[396]"></a>__use_no_heap_region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hrguard.o(.text), UNUSED)

<P><STRONG><a name="[397]"></a>__heap_region$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hrguard.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>_scanf_really_hex_real</STRONG> (Thumb, 778 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[359]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[12c]"></a>fread</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, freadfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = fread &rArr; _readbuf &rArr; _sys_read &rArr; mmc_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getF
</UL>

<P><STRONG><a name="[121]"></a>_flushlinebuffered</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, flushlinebuffered.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[124]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[125]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[398]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[131]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[130]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[134]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[132]"></a>_e2d</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[133]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[ff]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[10b]"></a>_btod_edivd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[100]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[10a]"></a>_btod_emuld</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[135]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[16]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[141]"></a>CmdError</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, platform_mmc.o(i.CmdError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[144]"></a>CmdResp1Error</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, platform_mmc.o(i.CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[145]"></a>CmdResp2Error</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, platform_mmc.o(i.CmdResp2Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[146]"></a>CmdResp3Error</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, platform_mmc.o(i.CmdResp3Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp3Error
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[147]"></a>CmdResp6Error</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, platform_mmc.o(i.CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdResp6Error
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[148]"></a>CmdResp7Error</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, platform_mmc.o(i.CmdResp7Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[18b]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[18a]"></a>DMA_DeInit</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[18c]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[19]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[166]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[165]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[149]"></a>FindSCR</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, platform_mmc.o(i.FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[158]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[159]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
</UL>

<P><STRONG><a name="[14]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19d]"></a>INTX_DISABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.INTX_DISABLE))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[19e]"></a>INTX_ENABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.INTX_ENABLE))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[153]"></a>InitMenu</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.InitMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = InitMenu &rArr; LCD_Color_Fill2 &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill2
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>IsCardProgramming</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, platform_mmc.o(i.IsCardProgramming))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsCardProgramming &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[156]"></a>KEY_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, key.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = KEY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>KEY_Scan</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, key.o(i.KEY_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KEY_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>

<P><STRONG><a name="[15b]"></a>LCD_Clear</STRONG> (Thumb, 98 bytes, Stack size 28 bytes, lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_Clear
</UL>

<P><STRONG><a name="[154]"></a>LCD_Color_Fill2</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lcd.o(i.LCD_Color_Fill2))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LCD_Color_Fill2 &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locate2
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMenu
</UL>

<P><STRONG><a name="[15e]"></a>LCD_Display_Dir</STRONG> (Thumb, 304 bytes, Stack size 36 bytes, lcd.o(i.LCD_Display_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_Display_Dir &rArr; LCD_Scan_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[160]"></a>LCD_Fast_DrawPoint</STRONG> (Thumb, 260 bytes, Stack size 36 bytes, lcd.o(i.LCD_Fast_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Showcon
</UL>

<P><STRONG><a name="[162]"></a>LCD_Fill</STRONG> (Thumb, 66 bytes, Stack size 28 bytes, lcd.o(i.LCD_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_Fill &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_Fill
</UL>

<P><STRONG><a name="[163]"></a>LCD_Init</STRONG> (Thumb, 11782 bytes, Stack size 168 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LCD_Init &rArr; LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>LCD_Pow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd.o(i.LCD_Pow))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[168]"></a>LCD_RD_DATA</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LCD_RD_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_RD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[167]"></a>LCD_ReadReg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd.o(i.LCD_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_ReadReg &rArr; LCD_RD_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[16a]"></a>LCD_SSD_BackLightSet</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd.o(i.LCD_SSD_BackLightSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_SSD_BackLightSet &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[15f]"></a>LCD_Scan_Dir</STRONG> (Thumb, 414 bytes, Stack size 20 bytes, lcd.o(i.LCD_Scan_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_Scan_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
</UL>

<P><STRONG><a name="[15c]"></a>LCD_SetCursor</STRONG> (Thumb, 310 bytes, Stack size 36 bytes, lcd.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill2
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[16d]"></a>LCD_ShowChar</STRONG> (Thumb, 188 bytes, Stack size 52 bytes, lcd.o(i.LCD_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[16e]"></a>LCD_ShowNum</STRONG> (Thumb, 118 bytes, Stack size 60 bytes, lcd.o(i.LCD_ShowNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_ShowNum
</UL>

<P><STRONG><a name="[170]"></a>LCD_ShowString</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, lcd.o(i.LCD_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locate2
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_print
</UL>

<P><STRONG><a name="[172]"></a>LCD_Showcon</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, main.o(i.LCD_Showcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_Showcon &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locate2
</UL>

<P><STRONG><a name="[15d]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd.o(i.LCD_WriteRAM_Prepare))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill2
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[161]"></a>LCD_WriteReg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd.o(i.LCD_WriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>

<P><STRONG><a name="[185]"></a>Locate2</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, main.o(i.Locate2))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Locate2 &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill2
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Showcon
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>MM2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.MM2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = MM2 &rArr; do_file_script &rArr; luaopen_base &rArr; base_open &rArr; luaL_register &rArr; luaL_openlib &rArr; luaL_findtable &rArr; lua_settable &rArr; luaV_settable &rArr; luaH_set &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[190]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[10]"></a>Nothing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Nothing))
<BR>[Address Reference Count : 2]<UL><LI> main.o(.data)
<LI> main.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[164]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[157]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[187]"></a>SDEnWideBus</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, platform_mmc.o(i.SDEnWideBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[143]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[19a]"></a>SDIO_ClockCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[195]"></a>SDIO_Clock_Set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, platform_mmc.o(i.SDIO_Clock_Set))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[19f]"></a>SDIO_DMACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[14b]"></a>SDIO_DataConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f10x_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DataConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[18f]"></a>SDIO_DeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[142]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[197]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[4d]"></a>SDIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, platform_mmc.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[198]"></a>SDIO_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f10x_sdio.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[14c]"></a>SDIO_ReadData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[14a]"></a>SDIO_SendCommand</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[199]"></a>SDIO_SetPowerState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1a3]"></a>SDIO_WriteData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_WriteData))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[189]"></a>SD_DMA_Config</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, platform_mmc.o(i.SD_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[18d]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, platform_mmc.o(i.SD_EnableWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[193]"></a>SD_GetCardInfo</STRONG> (Thumb, 520 bytes, Stack size 32 bytes, platform_mmc.o(i.SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[18e]"></a>SD_Init</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, platform_mmc.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDeviceMode
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Clock_Set
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[192]"></a>SD_InitializeCards</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, platform_mmc.o(i.SD_InitializeCards))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[191]"></a>SD_PowerON</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, platform_mmc.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_PowerON &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[188]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, platform_mmc.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_ProcessIRQSrc &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[19b]"></a>SD_ReadBlock</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, platform_mmc.o(i.SD_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SD_ReadBlock &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[1a0]"></a>SD_ReadDisk</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, platform_mmc.o(i.SD_ReadDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1a1]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 584 bytes, Stack size 64 bytes, platform_mmc.o(i.SD_ReadMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[194]"></a>SD_SelectDeselect</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, platform_mmc.o(i.SD_SelectDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[196]"></a>SD_SetDeviceMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, platform_mmc.o(i.SD_SetDeviceMode))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1a2]"></a>SD_WriteBlock</STRONG> (Thumb, 706 bytes, Stack size 48 bytes, platform_mmc.o(i.SD_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteData
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[1a4]"></a>SD_WriteDisk</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, platform_mmc.o(i.SD_WriteDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[1a5]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 730 bytes, Stack size 48 bytes, platform_mmc.o(i.SD_WriteMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteData
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[18]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[246]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[1b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1a8]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1a9]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1aa]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1ab]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1ac]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[1ae]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[10f]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1af]"></a>__mathlib_tofloat</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_tofloat &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[12b]"></a>__support_ldexp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[d0]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[e5]"></a>_sys_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _sys_close &rArr; mmc_close &rArr; f_close &rArr; f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_close
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[126]"></a>_sys_command_string</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i._sys_command_string))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
</UL>

<P><STRONG><a name="[bd]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[dc]"></a>_sys_flen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i._sys_flen))
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_file_len
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[da]"></a>_sys_istty</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fisatty
</UL>

<P><STRONG><a name="[e2]"></a>_sys_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _sys_open &rArr; mmc_open &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_open
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[11f]"></a>_sys_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i._sys_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _sys_read &rArr; mmc_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[115]"></a>_sys_seek</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(i._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _sys_seek &rArr; mmc_lseek &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[e6]"></a>_sys_tmpnam</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i._sys_tmpnam))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[116]"></a>_sys_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _sys_write &rArr; mmc_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[12f]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i._ttywrch))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[249]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[19c]"></a>convert_from_bytes_to_power_of_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, platform_mmc.o(i.convert_from_bytes_to_power_of_two))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[245]"></a>delay_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15a]"></a>delay_ms</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms
</UL>

<P><STRONG><a name="[169]"></a>delay_us</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[217]"></a>disk_initialize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[250]"></a>disk_ioctl</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_ioctl &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[20a]"></a>disk_read</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = disk_read &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[216]"></a>disk_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[252]"></a>disk_write</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[265]"></a>f_close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = f_close &rArr; f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_close
</UL>

<P><STRONG><a name="[267]"></a>f_lseek</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_lseek
</UL>

<P><STRONG><a name="[253]"></a>f_mount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.f_mount))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
</UL>

<P><STRONG><a name="[26d]"></a>f_open</STRONG> (Thumb, 310 bytes, Stack size 88 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_open
</UL>

<P><STRONG><a name="[276]"></a>f_read</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read
</UL>

<P><STRONG><a name="[266]"></a>f_sync</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[278]"></a>f_write</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write
</UL>

<P><STRONG><a name="[df]"></a>fgetc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fgetc &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[13c]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arith
</UL>

<P><STRONG><a name="[5d]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[1b0]"></a>frexp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[240]"></a>get_fat</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = get_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[26f]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1b4]"></a>ldexp</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[327]"></a>luaC_barrierback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lgc.o(i.luaC_barrierback))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_settable
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newkey
</UL>

<P><STRONG><a name="[1bf]"></a>luaC_barrierf</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lgc.o(i.luaC_barrierf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfenv
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_replace
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_linkupval
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerlocalvar
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indexupvalue
</UL>

<P><STRONG><a name="[221]"></a>luaC_freeall</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lgc.o(i.luaC_freeall))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = luaC_freeall &rArr; sweeplist &rArr;  sweeplist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>

<P><STRONG><a name="[2dc]"></a>luaC_fullgc</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lgc.o(i.luaC_fullgc))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = luaC_fullgc &rArr; singlestep &rArr; atomic &rArr; propagateall &rArr; propagatemark &rArr; traversestack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markroot
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
</UL>

<P><STRONG><a name="[2ef]"></a>luaC_link</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lgc.o(i.luaC_link))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newCclosure
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_newthread
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newupval
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
</UL>

<P><STRONG><a name="[2df]"></a>luaC_linkupval</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lgc.o(i.luaC_linkupval))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierf
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
</UL>

<P><STRONG><a name="[1da]"></a>luaC_separateudata</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lgc.o(i.luaC_separateudata))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = luaC_separateudata &rArr; luaT_gettm &rArr; luaH_getstr
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[1c6]"></a>luaC_step</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lgc.o(i.luaC_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = luaC_step &rArr; singlestep &rArr; atomic &rArr; propagateall &rArr; propagatemark &rArr; traversestack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_varargs
</UL>

<P><STRONG><a name="[14f]"></a>luaD_call</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ldo.o(i.luaD_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_call
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_call
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callTMres
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callTM
</UL>

<P><STRONG><a name="[2e2]"></a>luaD_callhook</STRONG> (Thumb, 132 bytes, Stack size 128 bytes, ldo.o(i.luaD_callhook))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = luaD_callhook &rArr; luaD_growstack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceexec
</UL>

<P><STRONG><a name="[181]"></a>luaD_growstack</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ldo.o(i.luaD_growstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = luaD_growstack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callhook
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryfuncTM
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_error
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushstr
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callTMres
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callTM
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[2e4]"></a>luaD_pcall</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ldo.o(i.luaD_pcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_seterrorobj
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_stack_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcall
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
</UL>

<P><STRONG><a name="[2e8]"></a>luaD_poscall</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ldo.o(i.luaD_poscall))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = luaD_poscall &rArr; luaD_callhook &rArr; luaD_growstack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callhook
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
</UL>

<P><STRONG><a name="[2e0]"></a>luaD_precall</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, ldo.o(i.luaD_precall))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = luaD_precall &rArr; adjust_varargs &rArr; luaH_setnum &rArr; newkey &rArr;  luaH_set (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callhook
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryfuncTM
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;growCI
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_varargs
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
</UL>

<P><STRONG><a name="[2ea]"></a>luaD_protectedparser</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, ldo.o(i.luaD_protectedparser))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = luaD_protectedparser &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>

<P><STRONG><a name="[2e5]"></a>luaD_rawrunprotected</STRONG> (Thumb, 46 bytes, Stack size 416 bytes, ldo.o(i.luaD_rawrunprotected))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
</UL>

<P><STRONG><a name="[2a0]"></a>luaD_reallocCI</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ldo.o(i.luaD_reallocCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = luaD_reallocCI &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_stack_limit
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;growCI
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestack
</UL>

<P><STRONG><a name="[2e3]"></a>luaD_reallocstack</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ldo.o(i.luaD_reallocstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctstack
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestack
</UL>

<P><STRONG><a name="[2e6]"></a>luaD_seterrorobj</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ldo.o(i.luaD_seterrorobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaD_seterrorobj &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>

<P><STRONG><a name="[25e]"></a>luaD_throw</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ldo.o(i.luaD_throw))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_seterrorobj
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_stack_limit
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;growCI
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lexerror
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[28e]"></a>luaE_freethread</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lstate.o(i.luaE_freethread))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = luaE_freethread &rArr; freestack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[2ee]"></a>luaE_newthread</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lstate.o(i.luaE_newthread))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = luaE_newthread &rArr; stack_init &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_link
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preinit_state
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
</UL>

<P><STRONG><a name="[220]"></a>luaF_close</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lfunc.o(i.luaF_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_linkupval
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeupval
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlinkupval
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>

<P><STRONG><a name="[2f2]"></a>luaF_findupval</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lfunc.o(i.luaF_findupval))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = luaF_findupval &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[28b]"></a>luaF_freeclosure</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lfunc.o(i.luaF_freeclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = luaF_freeclosure &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[28a]"></a>luaF_freeproto</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lfunc.o(i.luaF_freeproto))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = luaF_freeproto &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[28c]"></a>luaF_freeupval</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lfunc.o(i.luaF_freeupval))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaF_freeupval &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlinkupval
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[29c]"></a>luaF_getlocalname</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, lfunc.o(i.luaF_getlocalname))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = luaF_getlocalname
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[2f3]"></a>luaF_newCclosure</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lfunc.o(i.luaF_newCclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = luaF_newCclosure &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_link
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>

<P><STRONG><a name="[274]"></a>luaF_newLclosure</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lfunc.o(i.luaF_newLclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = luaF_newLclosure &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_link
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[180]"></a>luaF_newproto</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lfunc.o(i.luaF_newproto))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = luaF_newproto &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_link
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[275]"></a>luaF_newupval</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lfunc.o(i.luaF_newupval))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = luaF_newupval &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_link
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[140]"></a>luaG_aritherror</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, ldebug.o(i.luaG_aritherror))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = luaG_aritherror &rArr; luaV_tonumber &rArr; luaO_str2d &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arith
</UL>

<P><STRONG><a name="[182]"></a>luaG_checkcode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ldebug.o(i.luaG_checkcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = luaG_checkcode &rArr; symbexec
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbexec
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[343]"></a>luaG_checkopenop</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ldebug.o(i.luaG_checkopenop))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbexec
</UL>

<P><STRONG><a name="[2f5]"></a>luaG_concaterror</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ldebug.o(i.luaG_concaterror))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = luaG_concaterror &rArr; luaG_typeerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
</UL>

<P><STRONG><a name="[2f6]"></a>luaG_errormsg</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ldebug.o(i.luaG_errormsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = luaG_errormsg &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
</UL>

<P><STRONG><a name="[2ad]"></a>luaG_ordererror</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ldebug.o(i.luaG_ordererror))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = luaG_ordererror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessequal
</UL>

<P><STRONG><a name="[27e]"></a>luaG_runerror</STRONG> (Thumb, 90 bytes, Stack size 104 bytes, ldebug.o(i.luaG_runerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getluaproto
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentline
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_yield
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_settable
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_gettable
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_replace
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;growCI
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
</UL>

<P><STRONG><a name="[2f4]"></a>luaG_typeerror</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ldebug.o(i.luaG_typeerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = luaG_typeerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_settable
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_gettable
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryfuncTM
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_concaterror
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_aritherror
</UL>

<P><STRONG><a name="[28d]"></a>luaH_free</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ltable.o(i.luaH_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = luaH_free &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[2f9]"></a>luaH_get</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ltable.o(i.luaH_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = luaH_get &rArr; luaH_getnum &rArr; hashnum &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawequalObj
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getnum
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_gettable
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
</UL>

<P><STRONG><a name="[2fc]"></a>luaH_getn</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ltable.o(i.luaH_getn))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = luaH_getn &rArr; luaH_getnum &rArr; hashnum &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getnum
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_objlen
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[2fb]"></a>luaH_getnum</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ltable.o(i.luaH_getnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = luaH_getnum &rArr; hashnum &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashnum
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setnum
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
</UL>

<P><STRONG><a name="[2fa]"></a>luaH_getstr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ltable.o(i.luaH_getstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaH_getstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setstr
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
</UL>

<P><STRONG><a name="[1c7]"></a>luaH_new</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ltable.o(i.luaH_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = luaH_new &rArr; setnodevector &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_link
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setarrayvector
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_varargs
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
</UL>

<P><STRONG><a name="[2ff]"></a>luaH_next</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ltable.o(i.luaH_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = luaH_next &rArr; findindex &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
</UL>

<P><STRONG><a name="[300]"></a>luaH_resizearray</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ltable.o(i.luaH_resizearray))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = luaH_resizearray &rArr; resize &rArr;  luaH_setnum (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1bc]"></a>luaH_set</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ltable.o(i.luaH_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = luaH_set &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newkey
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_settable
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newkey
</UL>

<P><STRONG><a name="[1c8]"></a>luaH_setnum</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, ltable.o(i.luaH_setnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = luaH_setnum &rArr; newkey &rArr;  luaH_set (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getnum
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newkey
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_varargs
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize
</UL>

<P><STRONG><a name="[1c9]"></a>luaH_setstr</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, ltable.o(i.luaH_setstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = luaH_setstr &rArr; newkey &rArr;  luaH_set (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newkey
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_varargs
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
</UL>

<P><STRONG><a name="[284]"></a>luaK_checkstack</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcode.o(i.luaK_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = luaK_checkstack &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
</UL>

<P><STRONG><a name="[1cf]"></a>luaK_codeABC</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcode.o(i.luaK_codeABC))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codearith
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_label
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakstat
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[24f]"></a>luaK_codeABx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcode.o(i.luaK_codeABx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = luaK_codeABx &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[201]"></a>luaK_concat</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lcode.o(i.luaK_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakstat
</UL>

<P><STRONG><a name="[22b]"></a>luaK_dischargevars</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lcode.o(i.luaK_dischargevars))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = luaK_dischargevars &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setoneret
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freereg
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
</UL>

<P><STRONG><a name="[226]"></a>luaK_exp2RK</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, lcode.o(i.luaK_exp2RK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + Unknown Stack Size
<LI>Call Chain = luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecomp
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codearith
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
</UL>

<P><STRONG><a name="[27a]"></a>luaK_exp2anyreg</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lcode.o(i.luaK_exp2anyreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
</UL>

<P><STRONG><a name="[1c1]"></a>luaK_exp2nextreg</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lcode.o(i.luaK_exp2nextreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist1
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp1
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[305]"></a>luaK_exp2val</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcode.o(i.luaK_exp2val))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
</UL>

<P><STRONG><a name="[281]"></a>luaK_fixline</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcode.o(i.luaK_fixline))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[33c]"></a>luaK_getlabel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcode.o(i.luaK_getlabel))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
</UL>

<P><STRONG><a name="[233]"></a>luaK_goiftrue</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lcode.o(i.luaK_goiftrue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = luaK_goiftrue &rArr; jumponcond &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invertjump
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
</UL>

<P><STRONG><a name="[27b]"></a>luaK_indexed</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcode.o(i.luaK_indexed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = luaK_indexed &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
</UL>

<P><STRONG><a name="[306]"></a>luaK_infix</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, lcode.o(i.luaK_infix))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = luaK_infix &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnumeral
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[200]"></a>luaK_jump</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcode.o(i.luaK_jump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = luaK_jump &rArr; luaK_codeABx &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakstat
</UL>

<P><STRONG><a name="[1c3]"></a>luaK_nil</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lcode.o(i.luaK_nil))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[24e]"></a>luaK_numberK</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lcode.o(i.luaK_numberK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
</UL>

<P><STRONG><a name="[282]"></a>luaK_patchlist</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcode.o(i.luaK_patchlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = luaK_patchlist &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[262]"></a>luaK_patchtohere</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcode.o(i.luaK_patchtohere))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = luaK_patchtohere &rArr; luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[307]"></a>luaK_posfix</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, lcode.o(i.luaK_posfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288 + Unknown Stack Size
<LI>Call Chain = luaK_posfix &rArr; codecomp &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecomp
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codearith
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[308]"></a>luaK_prefix</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, lcode.o(i.luaK_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296 + Unknown Stack Size
<LI>Call Chain = luaK_prefix &rArr; codearith &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnumeral
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codearith
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[1c2]"></a>luaK_reserveregs</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lcode.o(i.luaK_reserveregs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = luaK_reserveregs &rArr; luaK_checkstack &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[21e]"></a>luaK_ret</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcode.o(i.luaK_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = luaK_ret &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[309]"></a>luaK_self</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcode.o(i.luaK_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248 + Unknown Stack Size
<LI>Call Chain = luaK_self &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
</UL>

<P><STRONG><a name="[236]"></a>luaK_setlist</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lcode.o(i.luaK_setlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = luaK_setlist &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[1d4]"></a>luaK_setoneret</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lcode.o(i.luaK_setoneret))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[1c4]"></a>luaK_setreturns</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lcode.o(i.luaK_setreturns))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = luaK_setreturns &rArr; luaK_reserveregs &rArr; luaK_checkstack &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[1d5]"></a>luaK_storevar</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lcode.o(i.luaK_storevar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248 + Unknown Stack Size
<LI>Call Chain = luaK_storevar &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[22f]"></a>luaK_stringK</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, lcode.o(i.luaK_stringK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = luaK_stringK &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
</UL>

<P><STRONG><a name="[299]"></a>luaL_argerror</STRONG> (Thumb, 96 bytes, Stack size 120 bytes, lauxlib.o(i.luaL_argerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_newproxy
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfunc
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typerror
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>

<P><STRONG><a name="[2d6]"></a>luaL_callmeta</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_callmeta))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = luaL_callmeta &rArr; lua_call &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_call
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
</UL>

<P><STRONG><a name="[2b8]"></a>luaL_checkany</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checkany))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
</UL>

<P><STRONG><a name="[173]"></a>luaL_checkinteger</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checkinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = luaL_checkinteger &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointeger
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_ShowNum
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_Fill
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_Clear
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_print
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_unpack
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfunc
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
</UL>

<P><STRONG><a name="[174]"></a>luaL_checklstring</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checklstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = luaL_checklstring &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_print
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadstring
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
</UL>

<P><STRONG><a name="[2c1]"></a>luaL_checkoption</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_checkoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208 + Unknown Stack Size
<LI>Call Chain = luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
</UL>

<P><STRONG><a name="[290]"></a>luaL_checkstack</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
</UL>

<P><STRONG><a name="[2a7]"></a>luaL_checktype</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checktype))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = luaL_checktype &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_unpack
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setfenv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
</UL>

<P><STRONG><a name="[1e6]"></a>luaL_error</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_unpack
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setfenv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfunc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlib
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>

<P><STRONG><a name="[30d]"></a>luaL_findtable</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_findtable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = luaL_findtable &rArr; lua_settable &rArr; luaV_settable &rArr; luaH_set &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settable
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_remove
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlib
</UL>

<P><STRONG><a name="[2ca]"></a>luaL_getmetafield</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_getmetafield))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = luaL_getmetafield &rArr; lua_pushstring &rArr; lua_pushlstring &rArr; luaC_step &rArr; singlestep &rArr; atomic &rArr; propagateall &rArr; propagatemark &rArr; traversestack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_remove
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
</UL>

<P><STRONG><a name="[2cc]"></a>luaL_loadbuffer</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_loadbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = luaL_loadbuffer &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadstring
</UL>

<P><STRONG><a name="[2c6]"></a>luaL_loadfile</STRONG> (Thumb, 226 bytes, Stack size 544 bytes, lauxlib.o(i.luaL_loadfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416 + Unknown Stack Size
<LI>Call Chain = luaL_loadfile &rArr; errfile &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_remove
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ungetc
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
</UL>

<P><STRONG><a name="[257]"></a>luaL_loadstring</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_loadstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = luaL_loadstring &rArr; luaL_loadbuffer &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbuffer
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
</UL>

<P><STRONG><a name="[255]"></a>luaL_newstate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lauxlib.o(i.luaL_newstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = luaL_newstate &rArr; lua_newstate &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_atpanic
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
</UL>

<P><STRONG><a name="[312]"></a>luaL_openlib</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, lauxlib.o(i.luaL_openlib))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = luaL_openlib &rArr; luaL_findtable &rArr; lua_settable &rArr; luaV_settable &rArr; luaH_set &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_findtable
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_remove
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_insert
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_register
</UL>

<P><STRONG><a name="[298]"></a>luaL_optinteger</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_optinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_unpack
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfunc
</UL>

<P><STRONG><a name="[2ba]"></a>luaL_optlstring</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_optlstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadstring
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
</UL>

<P><STRONG><a name="[1ee]"></a>luaL_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lauxlib.o(i.luaL_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = luaL_register &rArr; luaL_openlib &rArr; luaL_findtable &rArr; lua_settable &rArr; luaV_settable &rArr; luaH_set &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlib
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_open
</UL>

<P><STRONG><a name="[313]"></a>luaL_typerror</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_typerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
</UL>

<P><STRONG><a name="[2bc]"></a>luaL_where</STRONG> (Thumb, 58 bytes, Stack size 112 bytes, lauxlib.o(i.luaL_where))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>

<P><STRONG><a name="[1bd]"></a>luaM_growaux_</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lmem.o(i.luaM_growaux_))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerlocalvar
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indexupvalue
</UL>

<P><STRONG><a name="[17b]"></a>luaM_realloc_</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lmem.o(i.luaM_realloc_))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newCclosure
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_newthread
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newupval
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocCI
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_free
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeupval
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeproto
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeclosure
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_findupval
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlstr
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_openspace
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setarrayvector
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize
</UL>

<P><STRONG><a name="[17c]"></a>luaM_toobig</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lmem.o(i.luaM_toobig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = luaM_toobig &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocCI
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlstr
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_openspace
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setarrayvector
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize
</UL>

<P><STRONG><a name="[1dd]"></a>luaO_chunkid</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lobject.o(i.luaO_chunkid))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = luaO_chunkid &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lexerror
</UL>

<P><STRONG><a name="[324]"></a>luaO_fb2int</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lobject.o(i.luaO_fb2int))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[23a]"></a>luaO_int2fb</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lobject.o(i.luaO_int2fb))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[23e]"></a>luaO_log2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lobject.o(i.luaO_log2))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
</UL>

<P><STRONG><a name="[20c]"></a>luaO_pushfstring</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, lobject.o(i.luaO_pushfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lexerror
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[2f7]"></a>luaO_pushvfstring</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, lobject.o(i.luaO_pushvfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushstr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>

<P><STRONG><a name="[206]"></a>luaO_rawequalObj</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lobject.o(i.luaO_rawequalObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = luaO_rawequalObj &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_compTM
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_orderTM
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
</UL>

<P><STRONG><a name="[31a]"></a>luaO_str2d</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lobject.o(i.luaO_str2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = luaO_str2d &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
</UL>

<P><STRONG><a name="[184]"></a>luaS_newlstr</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lstring.o(i.luaS_newlstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = luaS_newlstr &rArr; newlstr &rArr; luaS_resize &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlstr
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tostring
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_seterrorobj
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_error
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_varargs
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushstr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
</UL>

<P><STRONG><a name="[31e]"></a>luaS_newudata</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lstring.o(i.luaS_newudata))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = luaS_newudata &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
</UL>

<P><STRONG><a name="[26a]"></a>luaS_resize</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lstring.o(i.luaS_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = luaS_resize &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlstr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[14e]"></a>luaT_gettm</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ltm.o(i.luaT_gettm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaT_gettm &rArr; luaH_getstr
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_settable
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_gettable
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_separateudata
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_compTM
</UL>

<P><STRONG><a name="[204]"></a>luaT_gettmbyobj</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ltm.o(i.luaT_gettmbyobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaT_gettmbyobj &rArr; luaH_getstr
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_settable
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_gettable
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryfuncTM
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_orderTM
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_binTM
</UL>

<P><STRONG><a name="[26b]"></a>luaT_init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ltm.o(i.luaT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = luaT_init &rArr; luaS_newlstr &rArr; newlstr &rArr; luaS_resize &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[31f]"></a>luaU_header</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lundump.o(i.luaU_header))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
</UL>

<P><STRONG><a name="[6d]"></a>luaU_undump</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, lundump.o(i.luaU_undump))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = luaU_undump &rArr; LoadFunction &rArr; LoadDebug &rArr; LoadString &rArr; LoadBlock &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_header
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(i.f_parser)
</UL>
<P><STRONG><a name="[319]"></a>luaV_concat</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, lvm.o(i.luaV_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tostring
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_concaterror
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_binTM
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_openspace
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[321]"></a>luaV_equalval</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lvm.o(i.luaV_equalval))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = luaV_equalval &rArr;  callTMres (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_compTM
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callTMres
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[2e1]"></a>luaV_execute</STRONG> (Thumb, 2766 bytes, Stack size 72 bytes, lvm.o(i.luaV_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = luaV_execute &rArr;  luaV_settable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_settable
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_gettable
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalval
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setnum
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierf
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_findupval
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_fb2int
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceexec
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessequal
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_binTM
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arith
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resizearray
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
</UL>

<P><STRONG><a name="[325]"></a>luaV_gettable</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, lvm.o(i.luaV_gettable))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = luaV_gettable &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callTMres
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[326]"></a>luaV_lessthan</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lvm.o(i.luaV_lessthan))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = luaV_lessthan &rArr; call_orderTM &rArr;  callTMres (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_orderTM
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[323]"></a>luaV_settable</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, lvm.o(i.luaV_settable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = luaV_settable &rArr; luaH_set &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callTM
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settable
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[137]"></a>luaV_tonumber</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lvm.o(i.luaV_tonumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = luaV_tonumber &rArr; luaO_str2d &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumber
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointeger
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_aritherror
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arith
</UL>

<P><STRONG><a name="[320]"></a>luaV_tostring</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, lvm.o(i.luaV_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = luaV_tostring &rArr; luaS_newlstr &rArr; newlstr &rArr; luaS_resize &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_objlen
</UL>

<P><STRONG><a name="[26c]"></a>luaX_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, llex.o(i.luaX_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = luaX_init &rArr; luaS_newlstr &rArr; newlstr &rArr; luaS_resize &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[259]"></a>luaX_lexerror</STRONG> (Thumb, 106 bytes, Stack size 104 bytes, llex.o(i.luaX_lexerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterlevel
</UL>

<P><STRONG><a name="[237]"></a>luaX_lookahead</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, llex.o(i.luaX_lookahead))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = luaX_lookahead &rArr; llex &rArr; read_string &rArr; inclinenumber &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[1f8]"></a>luaX_newstring</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, llex.o(i.luaX_newstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = luaX_newstring &rArr; luaH_setstr &rArr; newkey &rArr;  luaH_set (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[214]"></a>luaX_next</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, llex.o(i.luaX_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = luaX_next &rArr; llex &rArr; read_string &rArr; inclinenumber &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>

<P><STRONG><a name="[328]"></a>luaX_setinput</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, llex.o(i.luaX_setinput))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = luaX_setinput &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
</UL>

<P><STRONG><a name="[1cc]"></a>luaX_syntaxerror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llex.o(i.luaX_syntaxerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakstat
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[20b]"></a>luaX_token2str</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, llex.o(i.luaX_token2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lexerror
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>

<P><STRONG><a name="[6c]"></a>luaY_parser</STRONG> (Thumb, 94 bytes, Stack size 664 bytes, lparser.o(i.luaY_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 2672 + Unknown Stack Size
<LI>Call Chain = luaY_parser &rArr; chunk &rArr; statement &rArr; assignment &rArr;  assignment (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(i.f_parser)
</UL>
<P><STRONG><a name="[210]"></a>luaZ_fill</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lzio.o(i.luaZ_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_lookahead
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next
</UL>

<P><STRONG><a name="[32a]"></a>luaZ_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lzio.o(i.luaZ_init))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>

<P><STRONG><a name="[273]"></a>luaZ_lookahead</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lzio.o(i.luaZ_lookahead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaZ_lookahead &rArr; luaZ_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
</UL>

<P><STRONG><a name="[183]"></a>luaZ_openspace</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lzio.o(i.luaZ_openspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = luaZ_openspace &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
</UL>

<P><STRONG><a name="[176]"></a>luaZ_read</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lzio.o(i.luaZ_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = luaZ_read &rArr; luaZ_lookahead &rArr; luaZ_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_lookahead
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>

<P><STRONG><a name="[311]"></a>lua_atpanic</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lapi.o(i.lua_atpanic))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
</UL>

<P><STRONG><a name="[291]"></a>lua_call</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lapi.o(i.lua_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = lua_call &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
</UL>

<P><STRONG><a name="[1e5]"></a>lua_checkstack</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lapi.o(i.lua_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = lua_checkstack &rArr; luaD_growstack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_unpack
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
</UL>

<P><STRONG><a name="[2bd]"></a>lua_concat</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lapi.o(i.lua_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = lua_concat &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>

<P><STRONG><a name="[1f0]"></a>lua_createtable</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lapi.o(i.lua_createtable))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = lua_createtable &rArr; luaC_step &rArr; singlestep &rArr; atomic &rArr; propagateall &rArr; propagatemark &rArr; traversestack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_newproxy
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_open
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_findtable
</UL>

<P><STRONG><a name="[2be]"></a>lua_error</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lapi.o(i.lua_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = lua_error &rArr; luaG_errormsg &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>

<P><STRONG><a name="[2c2]"></a>lua_gc</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lapi.o(i.lua_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = lua_gc &rArr; luaC_step &rArr; singlestep &rArr; atomic &rArr; propagateall &rArr; propagatemark &rArr; traversestack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_gcinfo
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
</UL>

<P><STRONG><a name="[2c8]"></a>lua_getfenv</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lapi.o(i.lua_getfenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_getfenv
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getfenv
</UL>

<P><STRONG><a name="[2d1]"></a>lua_getfield</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, lapi.o(i.lua_getfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = lua_getfield &rArr; luaV_gettable &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_gettable
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlib
</UL>

<P><STRONG><a name="[29a]"></a>lua_getinfo</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ldebug.o(i.lua_getinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = lua_getinfo &rArr; collectvalidlines &rArr; luaH_setnum &rArr; newkey &rArr;  luaH_set (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfunc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>

<P><STRONG><a name="[2c9]"></a>lua_getmetatable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lapi.o(i.lua_getmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_getmetatable
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_newproxy
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
</UL>

<P><STRONG><a name="[23c]"></a>lua_getstack</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ldebug.o(i.lua_getstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_getstack
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfunc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;costatus
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>

<P><STRONG><a name="[1eb]"></a>lua_gettop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lapi.o(i.lua_gettop))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yield
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;costatus
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfile
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
</UL>

<P><STRONG><a name="[2b6]"></a>lua_insert</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lapi.o(i.lua_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lua_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setfenv
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlib
</UL>

<P><STRONG><a name="[2c0]"></a>lua_iscfunction</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lapi.o(i.lua_iscfunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_iscfunction
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setfenv
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getfenv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
</UL>

<P><STRONG><a name="[2d3]"></a>lua_isnumber</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lapi.o(i.lua_isnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lua_isnumber &rArr; luaV_tonumber &rArr; luaO_str2d &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setfenv
</UL>

<P><STRONG><a name="[293]"></a>lua_isstring</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lapi.o(i.lua_isstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lua_isstring &rArr; lua_type
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
</UL>

<P><STRONG><a name="[2cb]"></a>lua_load</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, lapi.o(i.lua_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = lua_load &rArr; luaD_protectedparser &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfile
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbuffer
</UL>

<P><STRONG><a name="[310]"></a>lua_newstate</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lstate.o(i.lua_newstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = lua_newstate &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preinit_state
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
</UL>

<P><STRONG><a name="[2bf]"></a>lua_newthread</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lapi.o(i.lua_newthread))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = lua_newthread &rArr; luaC_step &rArr; singlestep &rArr; atomic &rArr; propagateall &rArr; propagatemark &rArr; traversestack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_newthread
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
</UL>

<P><STRONG><a name="[2cd]"></a>lua_newuserdata</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lapi.o(i.lua_newuserdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = lua_newuserdata &rArr; luaC_step &rArr; singlestep &rArr; atomic &rArr; propagateall &rArr; propagatemark &rArr; traversestack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcurrenv
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_newproxy
</UL>

<P><STRONG><a name="[2d0]"></a>lua_next</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lapi.o(i.lua_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = lua_next &rArr; luaH_next &rArr; findindex &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
</UL>

<P><STRONG><a name="[2d9]"></a>lua_objlen</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lapi.o(i.lua_objlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = lua_objlen &rArr; luaV_tostring &rArr; luaS_newlstr &rArr; newlstr &rArr; luaS_resize &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tostring
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_unpack
</UL>

<P><STRONG><a name="[258]"></a>lua_pcall</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lapi.o(i.lua_pcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lua_pcall &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
</UL>

<P><STRONG><a name="[2c3]"></a>lua_pushboolean</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lapi.o(i.lua_pushboolean))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_newproxy
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
</UL>

<P><STRONG><a name="[1e1]"></a>lua_pushcclosure</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lapi.o(i.lua_pushcclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = lua_pushcclosure &rArr; luaC_step &rArr; singlestep &rArr; atomic &rArr; propagateall &rArr; propagatemark &rArr; traversestack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newCclosure
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcurrenv
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cowrap
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_open
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxopen
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlib
</UL>

<P><STRONG><a name="[1e7]"></a>lua_pushfstring</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lapi.o(i.lua_pushfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typerror
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfile
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
</UL>

<P><STRONG><a name="[2a8]"></a>lua_pushinteger</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lapi.o(i.lua_pushinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lua_pushinteger
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_gcinfo
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
</UL>

<P><STRONG><a name="[1ef]"></a>lua_pushlstring</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lapi.o(i.lua_pushlstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = lua_pushlstring &rArr; luaC_step &rArr; singlestep &rArr; atomic &rArr; propagateall &rArr; propagatemark &rArr; traversestack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_open
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfile
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_findtable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>

<P><STRONG><a name="[2b5]"></a>lua_pushnil</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lapi.o(i.lua_pushnil))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_corunning
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>

<P><STRONG><a name="[152]"></a>lua_pushnumber</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lapi.o(i.lua_pushnumber))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setrand
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
</UL>

<P><STRONG><a name="[2c5]"></a>lua_pushstring</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lapi.o(i.lua_pushstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = lua_pushstring &rArr; lua_pushlstring &rArr; luaC_step &rArr; singlestep &rArr; atomic &rArr; propagateall &rArr; propagatemark &rArr; traversestack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
</UL>

<P><STRONG><a name="[2c4]"></a>lua_pushthread</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lapi.o(i.lua_pushthread))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setfenv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_corunning
</UL>

<P><STRONG><a name="[1ed]"></a>lua_pushvalue</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lapi.o(i.lua_pushvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_pushvalue
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setfenv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_newproxy
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getfenv
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfunc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_open
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlib
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_findtable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
</UL>

<P><STRONG><a name="[30c]"></a>lua_pushvfstring</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lapi.o(i.lua_pushvfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = lua_pushvfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>

<P><STRONG><a name="[2d2]"></a>lua_rawequal</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lapi.o(i.lua_rawequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lua_rawequal &rArr; luaO_rawequalObj &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawequalObj
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
</UL>

<P><STRONG><a name="[2ce]"></a>lua_rawget</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lapi.o(i.lua_rawget))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lua_rawget &rArr; luaH_get &rArr; luaH_getnum &rArr; hashnum &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_newproxy
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_findtable
</UL>

<P><STRONG><a name="[2a9]"></a>lua_rawgeti</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lapi.o(i.lua_rawgeti))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lua_rawgeti &rArr; luaH_getnum &rArr; hashnum &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getnum
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_unpack
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
</UL>

<P><STRONG><a name="[2cf]"></a>lua_rawset</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lapi.o(i.lua_rawset))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = lua_rawset &rArr; luaH_set &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_newproxy
</UL>

<P><STRONG><a name="[25d]"></a>lua_remove</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lapi.o(i.lua_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlib
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfile
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_findtable
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
</UL>

<P><STRONG><a name="[294]"></a>lua_replace</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, lapi.o(i.lua_replace))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = lua_replace &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierf
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
</UL>

<P><STRONG><a name="[1ea]"></a>lua_resume</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ldo.o(i.lua_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = lua_resume &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_seterrorobj
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
</UL>

<P><STRONG><a name="[2d5]"></a>lua_setfenv</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lapi.o(i.lua_setfenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_setfenv &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierf
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setfenv
</UL>

<P><STRONG><a name="[1e2]"></a>lua_setfield</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, lapi.o(i.lua_setfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = lua_setfield &rArr; luaV_settable &rArr; luaH_set &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_settable
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_open
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxopen
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlib
</UL>

<P><STRONG><a name="[1e9]"></a>lua_setlevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lapi.o(i.lua_setlevel))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
</UL>

<P><STRONG><a name="[1f1]"></a>lua_setmetatable</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lapi.o(i.lua_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lua_setmetatable &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierf
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_newproxy
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_open
</UL>

<P><STRONG><a name="[30e]"></a>lua_settable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lapi.o(i.lua_settable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = lua_settable &rArr; luaV_settable &rArr; luaH_set &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_settable
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_findtable
</UL>

<P><STRONG><a name="[2c7]"></a>lua_settop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lapi.o(i.lua_settop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_newproxy
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlib
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfile
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_findtable
</UL>

<P><STRONG><a name="[23b]"></a>lua_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lapi.o(i.lua_status))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;costatus
</UL>

<P><STRONG><a name="[2b9]"></a>lua_toboolean</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lapi.o(i.lua_toboolean))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_toboolean
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_newproxy
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
</UL>

<P><STRONG><a name="[30a]"></a>lua_tointeger</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lapi.o(i.lua_tointeger))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lua_tointeger &rArr; luaV_tonumber &rArr; luaO_str2d &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>

<P><STRONG><a name="[25c]"></a>lua_tolstring</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lapi.o(i.lua_tolstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = lua_tolstring &rArr; luaC_step &rArr; singlestep &rArr; atomic &rArr; propagateall &rArr; propagatemark &rArr; traversestack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tostring
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfile
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
</UL>

<P><STRONG><a name="[2d4]"></a>lua_tonumber</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lapi.o(i.lua_tonumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lua_tonumber &rArr; luaV_tonumber &rArr; luaO_str2d &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setfenv
</UL>

<P><STRONG><a name="[2d7]"></a>lua_topointer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lapi.o(i.lua_topointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lua_topointer &rArr; lua_touserdata
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
</UL>

<P><STRONG><a name="[2bb]"></a>lua_tothread</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lapi.o(i.lua_tothread))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_tothread
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
</UL>

<P><STRONG><a name="[32d]"></a>lua_touserdata</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lapi.o(i.lua_touserdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_touserdata
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_topointer
</UL>

<P><STRONG><a name="[292]"></a>lua_type</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lapi.o(i.lua_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_type
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2adr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_unpack
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_newproxy
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfunc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typerror
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlib
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_findtable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
</UL>

<P><STRONG><a name="[2d8]"></a>lua_typename</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(i.lua_typename))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typerror
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
</UL>

<P><STRONG><a name="[1e8]"></a>lua_xmove</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, lapi.o(i.lua_xmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lua_xmove
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
</UL>

<P><STRONG><a name="[2da]"></a>lua_yield</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ldo.o(i.lua_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = lua_yield &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yield
</UL>

<P><STRONG><a name="[256]"></a>luaopen_base</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lbaselib.o(i.luaopen_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = luaopen_base &rArr; base_open &rArr; luaL_register &rArr; luaL_openlib &rArr; luaL_findtable &rArr; lua_settable &rArr; luaV_settable &rArr; luaH_set &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_register
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_open
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
</UL>

<P><STRONG><a name="[b8]"></a>main</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; LCD_Init &rArr; LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locate2
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1b5]"></a>mmc_close</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mmcfs.o(i.mmc_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mmc_close &rArr; f_close &rArr; f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[1b6]"></a>mmc_file_len</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mmcfs.o(i.mmc_file_len))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[1b9]"></a>mmc_lseek</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mmcfs.o(i.mmc_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mmc_lseek &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[1b7]"></a>mmc_open</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, mmcfs.o(i.mmc_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = mmc_open &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcfs_find_empty_fd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1b8]"></a>mmc_read</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mmcfs.o(i.mmc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mmc_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[1ba]"></a>mmc_write</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mmcfs.o(i.mmc_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mmc_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[32e]"></a>mmcfs_find_empty_fd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mmcfs.o(i.mmcfs_find_empty_fd))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_open
</UL>

<P><STRONG><a name="[13e]"></a>pow</STRONG> (Thumb, 2478 bytes, Stack size 112 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arith
</UL>

<P><STRONG><a name="[241]"></a>put_fat</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[e7]"></a>remove</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i.remove))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[332]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[31b]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2d
</UL>

<P><STRONG><a name="[5a]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>_get_lc_collate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_collate_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_collate
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_collate_2
</UL>

<P><STRONG><a name="[aa]"></a>_get_lc_monetary</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_monetary_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_monetary
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_monetary_2
</UL>

<P><STRONG><a name="[ac]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[1b2]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[344]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
</UL>

<P><STRONG><a name="[138]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arith
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[347]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[34a]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[34e]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arith
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[34c]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1b1]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setfenv
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalval
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawequalObj
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getnum
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashnum
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayindex
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[34d]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[1be]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointeger
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayindex
</UL>

<P><STRONG><a name="[34f]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[350]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setrand
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setnum
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getnum
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_varargs
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayindex
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[399]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[16b]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2d
</UL>

<P><STRONG><a name="[39a]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[2ae]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessequal
</UL>

<P><STRONG><a name="[351]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[354]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arith
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[352]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[346]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[349]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1b3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[353]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arith
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[355]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[340]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arith
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[357]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[345]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[9d]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>

<P><STRONG><a name="[34b]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[1ad]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[112]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[10e]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[10d]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[358]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[68]"></a>GetKey</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, main.o(i.GetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetKey &rArr; KEY_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.do_file_script)
</UL>
<P><STRONG><a name="[66]"></a>LCD_print</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, main.o(i.LCD_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = LCD_print &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.do_file_script)
<LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>Setrand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.Setrand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Setrand
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.do_file_script)
</UL>
<P><STRONG><a name="[78]"></a>_LCD_Clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i._LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = _LCD_Clear &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>_LCD_Fill</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, main.o(i._LCD_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = _LCD_Fill &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.do_file_script)
</UL>
<P><STRONG><a name="[6b]"></a>_LCD_ShowNum</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, main.o(i._LCD_ShowNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = _LCD_ShowNum &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.do_file_script)
</UL>
<P><STRONG><a name="[69]"></a>_delay_ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i._delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = _delay_ms &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.do_file_script)
</UL>
<P><STRONG><a name="[186]"></a>do_file_script</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, main.o(i.do_file_script))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = do_file_script &rArr; luaopen_base &rArr; base_open &rArr; luaL_register &rArr; luaL_openlib &rArr; luaL_findtable &rArr; lua_settable &rArr; luaV_settable &rArr; luaH_set &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcall
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_register
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MM2
</UL>

<P><STRONG><a name="[1a7]"></a>SetSysClockTo72</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[209]"></a>check_fs</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = check_fs &rArr; disk_read &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[215]"></a>chk_mounted</STRONG> (Thumb, 514 bytes, Stack size 32 bytes, ff.o(i.chk_mounted))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = chk_mounted &rArr; check_fs &rArr; disk_read &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[23f]"></a>create_chain</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[242]"></a>create_name</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = create_name
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[247]"></a>dir_next</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[24a]"></a>dir_register</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = dir_register &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[24b]"></a>dir_sdi</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[26e]"></a>follow_path</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[270]"></a>ld_clust</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.ld_clust))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[24c]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[243]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[248]"></a>move_window</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[272]"></a>remove_chain</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[271]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[277]"></a>sync</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ff.o(i.sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sync &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[268]"></a>validate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[76]"></a>f_call</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lapi.o(i.f_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = f_call &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lapi.o(i.lua_pcall)
</UL>
<P><STRONG><a name="[32b]"></a>getcurrenv</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lapi.o(i.getcurrenv))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
</UL>

<P><STRONG><a name="[329]"></a>index2adr</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, lapi.o(i.index2adr))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcall
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_topointer
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumber
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointeger
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settable
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfenv
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_replace
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_remove
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_objlen
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_iscfunction
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_insert
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfenv
</UL>

<P><STRONG><a name="[25a]"></a>errfile</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lauxlib.o(i.errfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = errfile &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_remove
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfile
</UL>

<P><STRONG><a name="[72]"></a>getF</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lauxlib.o(i.getF))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = getF &rArr; fread &rArr; _readbuf &rArr; _sys_read &rArr; mmc_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_loadfile)
</UL>
<P><STRONG><a name="[71]"></a>getS</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lauxlib.o(i.getS))
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_loadbuffer)
</UL>
<P><STRONG><a name="[73]"></a>l_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lauxlib.o(i.l_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = l_alloc &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_newstate)
</UL>
<P><STRONG><a name="[74]"></a>panic</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lauxlib.o(i.panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = panic &rArr; lua_tolstring &rArr; luaC_step &rArr; singlestep &rArr; atomic &rArr; propagateall &rArr; propagatemark &rArr; traversestack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_newstate)
</UL>
<P><STRONG><a name="[30b]"></a>tag_error</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lauxlib.o(i.tag_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typerror
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
</UL>

<P><STRONG><a name="[1e0]"></a>auxopen</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lbaselib.o(i.auxopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = auxopen &rArr; lua_setfield &rArr; luaV_settable &rArr; luaH_set &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_open
</UL>

<P><STRONG><a name="[1e3]"></a>auxresume</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lbaselib.o(i.auxresume))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = auxresume &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;costatus
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setlevel
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
</UL>

<P><STRONG><a name="[1ec]"></a>base_open</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lbaselib.o(i.base_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = base_open &rArr; luaL_register &rArr; luaL_openlib &rArr; luaL_findtable &rArr; lua_settable &rArr; luaV_settable &rArr; luaH_set &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_register
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxopen
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
</UL>

<P><STRONG><a name="[1e4]"></a>costatus</STRONG> (Thumb, 64 bytes, Stack size 112 bytes, lbaselib.o(i.costatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = costatus &rArr; lua_getstack
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_status
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
</UL>

<P><STRONG><a name="[6f]"></a>generic_reader</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lbaselib.o(i.generic_reader))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = generic_reader &rArr; luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_replace
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.luaB_load)
</UL>
<P><STRONG><a name="[297]"></a>getfunc</STRONG> (Thumb, 128 bytes, Stack size 112 bytes, lbaselib.o(i.getfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288 + Unknown Stack Size
<LI>Call Chain = getfunc &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setfenv
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getfenv
</UL>

<P><STRONG><a name="[61]"></a>ipairsaux</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lbaselib.o(i.ipairsaux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = ipairsaux &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.base_open)
</UL>
<P><STRONG><a name="[2b4]"></a>load_aux</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lbaselib.o(i.load_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = load_aux &rArr; lua_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadstring
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
</UL>

<P><STRONG><a name="[79]"></a>luaB_assert</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = luaB_assert &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>luaB_auxwrap</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_auxwrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = luaB_auxwrap &rArr; auxresume &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_insert
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.luaB_cowrap)
</UL>
<P><STRONG><a name="[90]"></a>luaB_cocreate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_cocreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = luaB_cocreate &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_iscfunction
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cowrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>luaB_collectgarbage</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_collectgarbage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = luaB_collectgarbage &rArr; luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>luaB_coresume</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_coresume))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = luaB_coresume &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_insert
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>luaB_corunning</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_corunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaB_corunning
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>luaB_costatus</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_costatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = luaB_costatus &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;costatus
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>luaB_cowrap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_cowrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = luaB_cowrap &rArr; luaB_cocreate &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>luaB_dofile</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_dofile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432 + Unknown Stack Size
<LI>Call Chain = luaB_dofile &rArr; luaL_loadfile &rArr; errfile &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfile
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>luaB_error</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = luaB_error &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>luaB_gcinfo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_gcinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = luaB_gcinfo &rArr; lua_gc &rArr; luaC_step &rArr; singlestep &rArr; atomic &rArr; propagateall &rArr; propagatemark &rArr; traversestack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>luaB_getfenv</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_getfenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
<LI>Call Chain = luaB_getfenv &rArr; getfunc &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfunc
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_iscfunction
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfenv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>luaB_getmetatable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_getmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = luaB_getmetatable &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>luaB_ipairs</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_ipairs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = luaB_ipairs &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.base_open)
</UL>
<P><STRONG><a name="[81]"></a>luaB_load</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = luaB_load &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>luaB_loadfile</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_loadfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424 + Unknown Stack Size
<LI>Call Chain = luaB_loadfile &rArr; luaL_loadfile &rArr; errfile &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>luaB_loadstring</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_loadstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = luaB_loadstring &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>luaB_newproxy</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_newproxy))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = luaB_newproxy &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.base_open)
</UL>
<P><STRONG><a name="[63]"></a>luaB_next</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = luaB_next &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lbaselib.o(.constdata)
<LI> lbaselib.o(i.base_open)
</UL>
<P><STRONG><a name="[64]"></a>luaB_pairs</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_pairs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = luaB_pairs &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.base_open)
</UL>
<P><STRONG><a name="[83]"></a>luaB_pcall</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_pcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = luaB_pcall &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcall
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_insert
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>luaB_print</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lbaselib.o(i.luaB_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = luaB_print &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_call
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>luaB_rawequal</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_rawequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = luaB_rawequal &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>luaB_rawget</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_rawget))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = luaB_rawget &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>luaB_rawset</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_rawset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = luaB_rawset &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>luaB_select</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = luaB_select &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>luaB_setfenv</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_setfenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
<LI>Call Chain = luaB_setfenv &rArr; getfunc &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfunc
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumber
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfenv
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_iscfunction
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_insert
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>luaB_setmetatable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = luaB_setmetatable &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>luaB_tonumber</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_tonumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = luaB_tonumber &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumber
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>luaB_tostring</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = luaB_tostring &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_topointer
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>luaB_type</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = luaB_type &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>luaB_unpack</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = luaB_unpack &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; luaL_typerror &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_objlen
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>luaB_xpcall</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_xpcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = luaB_xpcall &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcall
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_replace
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_insert
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>luaB_yield</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = luaB_yield &rArr; lua_yield &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_yield
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[1bb]"></a>addk</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, lcode.o(i.addk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_stringK
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
</UL>

<P><STRONG><a name="[223]"></a>code_label</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcode.o(i.code_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = code_label &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[224]"></a>codearith</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lcode.o(i.codearith))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = codearith &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[228]"></a>codecomp</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, lcode.o(i.codecomp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = codecomp &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[22a]"></a>codenot</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lcode.o(i.codenot))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = codenot &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevalues
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invertjump
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
</UL>

<P><STRONG><a name="[229]"></a>condjump</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcode.o(i.condjump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = condjump &rArr; luaK_jump &rArr; luaK_codeABx &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecomp
</UL>

<P><STRONG><a name="[225]"></a>constfolding</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, lcode.o(i.constfolding))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = constfolding &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isnumeral
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codearith
</UL>

<P><STRONG><a name="[22d]"></a>discharge2anyreg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcode.o(i.discharge2anyreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = discharge2anyreg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>

<P><STRONG><a name="[24d]"></a>discharge2reg</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lcode.o(i.discharge2reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
</UL>

<P><STRONG><a name="[260]"></a>exp2reg</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, lcode.o(i.exp2reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;need_value
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_label
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
</UL>

<P><STRONG><a name="[27f]"></a>fixjump</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lcode.o(i.fixjump))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>

<P><STRONG><a name="[227]"></a>freeexp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcode.o(i.freeexp))
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freereg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecomp
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codearith
</UL>

<P><STRONG><a name="[288]"></a>freereg</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcode.o(i.freereg))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
</UL>

<P><STRONG><a name="[304]"></a>getjump</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lcode.o(i.getjump))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevalues
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;need_value
</UL>

<P><STRONG><a name="[2a6]"></a>getjumpcontrol</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lcode.o(i.getjumpcontrol))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchtestreg
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;need_value
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invertjump
</UL>

<P><STRONG><a name="[22c]"></a>invertjump</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcode.o(i.invertjump))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = invertjump
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjumpcontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>

<P><STRONG><a name="[234]"></a>isnumeral</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lcode.o(i.isnumeral))
<BR><BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
</UL>

<P><STRONG><a name="[2aa]"></a>jumponcond</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lcode.o(i.jumponcond))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = jumponcond &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
</UL>

<P><STRONG><a name="[303]"></a>luaK_code</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lcode.o(i.luaK_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>

<P><STRONG><a name="[261]"></a>need_value</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lcode.o(i.need_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = need_value
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjumpcontrol
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[263]"></a>patchlistaux</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, lcode.o(i.patchlistaux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchtestreg
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[331]"></a>patchtestreg</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lcode.o(i.patchtestreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = patchtestreg
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjumpcontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevalues
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>

<P><STRONG><a name="[22e]"></a>removevalues</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lcode.o(i.removevalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = removevalues &rArr; patchtestreg
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchtestreg
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>

<P><STRONG><a name="[1dc]"></a>auxgetinfo</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, ldebug.o(i.auxgetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = auxgetinfo &rArr; getfuncname &rArr; getobjname &rArr; symbexec
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfuncname
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentline
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
</UL>

<P><STRONG><a name="[342]"></a>checkArgMode</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ldebug.o(i.checkArgMode))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbexec
</UL>

<P><STRONG><a name="[230]"></a>collectvalidlines</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, ldebug.o(i.collectvalidlines))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = collectvalidlines &rArr; luaH_setnum &rArr; newkey &rArr;  luaH_set (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setnum
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
</UL>

<P><STRONG><a name="[1de]"></a>currentline</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ldebug.o(i.currentline))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = currentline
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
</UL>

<P><STRONG><a name="[244]"></a>currentpc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ldebug.o(i.currentpc))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfuncname
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentline
</UL>

<P><STRONG><a name="[1df]"></a>getfuncname</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ldebug.o(i.getfuncname))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = getfuncname &rArr; getobjname &rArr; symbexec
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
</UL>

<P><STRONG><a name="[2f8]"></a>getluaproto</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ldebug.o(i.getluaproto))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>

<P><STRONG><a name="[29b]"></a>getobjname</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, ldebug.o(i.getobjname))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = getobjname &rArr; symbexec
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_getlocalname
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbexec
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kname
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfuncname
</UL>

<P><STRONG><a name="[29e]"></a>kname</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ldebug.o(i.kname))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[29d]"></a>symbexec</STRONG> (Thumb, 828 bytes, Stack size 56 bytes, ldebug.o(i.symbexec))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = symbexec
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_checkopenop
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkArgMode
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_checkcode
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[1c5]"></a>adjust_varargs</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ldo.o(i.adjust_varargs))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = adjust_varargs &rArr; luaH_setnum &rArr; newkey &rArr;  luaH_set (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setnum
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setstr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>

<P><STRONG><a name="[2ec]"></a>correctstack</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ldo.o(i.correctstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = correctstack
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
</UL>

<P><STRONG><a name="[70]"></a>f_parser</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ldo.o(i.f_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = f_parser &rArr; luaC_step &rArr; singlestep &rArr; atomic &rArr; propagateall &rArr; propagatemark &rArr; traversestack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_lookahead
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newupval
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(i.luaD_protectedparser)
</UL>
<P><STRONG><a name="[29f]"></a>growCI</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ldo.o(i.growCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = growCI &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocCI
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>

<P><STRONG><a name="[2e7]"></a>restore_stack_limit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ldo.o(i.restore_stack_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = restore_stack_limit &rArr; luaD_reallocCI &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocCI
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>

<P><STRONG><a name="[77]"></a>resume</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ldo.o(i.resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = resume &rArr; luaV_execute &rArr;  luaV_settable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(i.lua_resume)
</UL>
<P><STRONG><a name="[32c]"></a>resume_error</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ldo.o(i.resume_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = resume_error &rArr; luaS_newlstr &rArr; newlstr &rArr; luaS_resize &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
</UL>

<P><STRONG><a name="[2e9]"></a>tryfuncTM</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ldo.o(i.tryfuncTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = tryfuncTM &rArr; luaG_typeerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>

<P><STRONG><a name="[2f1]"></a>unlinkupval</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lfunc.o(i.unlinkupval))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeupval
</UL>

<P><STRONG><a name="[14d]"></a>GCTM</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, lgc.o(i.GCTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = GCTM &rArr;  luaD_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[1d6]"></a>atomic</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, lgc.o(i.atomic))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = atomic &rArr; propagateall &rArr; propagatemark &rArr; traversestack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_separateudata
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleartable
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[1db]"></a>cleartable</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lgc.o(i.cleartable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cleartable
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeentry
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[289]"></a>freeobj</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, lgc.o(i.freeobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = freeobj &rArr; luaE_freethread &rArr; freestack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_free
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeupval
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeproto
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeclosure
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>

<P><STRONG><a name="[21b]"></a>iscleared</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lgc.o(i.iscleared))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleartable
</UL>

<P><STRONG><a name="[1d9]"></a>markmt</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lgc.o(i.markmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = markmt &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markroot
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[2de]"></a>markroot</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lgc.o(i.markroot))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = markroot &rArr; markmt &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[1d8]"></a>propagateall</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lgc.o(i.propagateall))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = propagateall &rArr; propagatemark &rArr; traversestack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[335]"></a>propagatemark</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, lgc.o(i.propagatemark))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = propagatemark &rArr; traversestack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestack
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseproto
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseclosure
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
</UL>

<P><STRONG><a name="[1d7]"></a>reallymarkobject</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, lgc.o(i.reallymarkobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + In Cycle
<LI>Call Chain = reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierf
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestack
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseproto
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseclosure
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markroot
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[21c]"></a>removeentry</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lgc.o(i.removeentry))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleartable
</UL>

<P><STRONG><a name="[2dd]"></a>singlestep</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, lgc.o(i.singlestep))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = singlestep &rArr; atomic &rArr; propagateall &rArr; propagatemark &rArr; traversestack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markroot
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>

<P><STRONG><a name="[2db]"></a>sweeplist</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, lgc.o(i.sweeplist))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = sweeplist &rArr;  sweeplist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeall
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[337]"></a>traverseclosure</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lgc.o(i.traverseclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = traverseclosure &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[339]"></a>traverseproto</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, lgc.o(i.traverseproto))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = traverseproto &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[338]"></a>traversestack</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, lgc.o(i.traversestack))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = traversestack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocCI
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[336]"></a>traversetable</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, lgc.o(i.traversetable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = traversetable &rArr; luaT_gettm &rArr; luaH_getstr
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeentry
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[33a]"></a>buffreplace</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, llex.o(i.buffreplace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = buffreplace
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
</UL>

<P><STRONG><a name="[20d]"></a>check_next</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, llex.o(i.check_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = check_next &rArr; save &rArr;  luaX_lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[2a4]"></a>inclinenumber</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, llex.o(i.inclinenumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = inclinenumber &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[2af]"></a>llex</STRONG> (Thumb, 926 bytes, Stack size 32 bytes, llex.o(i.llex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = llex &rArr; read_string &rArr; inclinenumber &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lexerror
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lookahead
</UL>

<P><STRONG><a name="[2b1]"></a>read_long_string</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, llex.o(i.read_long_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = read_long_string &rArr; inclinenumber &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lexerror
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[2b3]"></a>read_numeral</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, llex.o(i.read_numeral))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = read_numeral &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2d
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lexerror
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffreplace
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[2b2]"></a>read_string</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, llex.o(i.read_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = read_string &rArr; inclinenumber &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lexerror
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[20f]"></a>save</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, llex.o(i.save))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = save &rArr;  luaX_lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lexerror
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next
</UL>

<P><STRONG><a name="[2b0]"></a>skip_sep</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, llex.o(i.skip_sep))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = skip_sep &rArr; save &rArr;  luaX_lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[318]"></a>pushstr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lobject.o(i.pushstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = pushstr &rArr; luaS_newlstr &rArr; newlstr &rArr; luaS_resize &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>

<P><STRONG><a name="[1c0]"></a>adjust_assign</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lparser.o(i.adjust_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = adjust_assign &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[1fa]"></a>adjustlocalvars</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, lparser.o(i.adjustlocalvars))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adjustlocalvars
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[1cb]"></a>assignment</STRONG> (Thumb, 260 bytes, Stack size 112 bytes, lparser.o(i.assignment))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = assignment &rArr;  assignment (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setoneret
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist1
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[1f2]"></a>block</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lparser.o(i.block))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = block &rArr;  chunk (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[21a]"></a>block_follow</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lparser.o(i.block_follow))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk
</UL>

<P><STRONG><a name="[1f6]"></a>body</STRONG> (Thumb, 124 bytes, Stack size 592 bytes, lparser.o(i.body))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = body &rArr;  chunk (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
</UL>

<P><STRONG><a name="[1ff]"></a>breakstat</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lparser.o(i.breakstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = breakstat &rArr; luaK_jump &rArr; luaK_codeABx &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
</UL>

<P><STRONG><a name="[207]"></a>check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lparser.o(i.check))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = check &rArr; error_expected &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>

<P><STRONG><a name="[1fc]"></a>check_match</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lparser.o(i.check_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = check_match &rArr; testnext &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; inclinenumber &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[211]"></a>checkname</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lparser.o(i.checkname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = checkname &rArr; str_checkname &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; inclinenumber &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
</UL>

<P><STRONG><a name="[1d1]"></a>checknext</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lparser.o(i.checknext))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = checknext &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; inclinenumber &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[1f4]"></a>chunk</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lparser.o(i.chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008 + Unknown Stack Size
<LI>Call Chain = chunk &rArr; statement &rArr; assignment &rArr;  assignment (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterlevel
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>

<P><STRONG><a name="[1fd]"></a>close_func</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, lparser.o(i.close_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = close_func &rArr; luaK_ret &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevars
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[213]"></a>codestring</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lparser.o(i.codestring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = codestring &rArr; luaK_stringK &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_stringK
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
</UL>

<P><STRONG><a name="[231]"></a>cond</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, lparser.o(i.cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816 + Unknown Stack Size
<LI>Call Chain = cond &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
</UL>

<P><STRONG><a name="[235]"></a>constructor</STRONG> (Thumb, 344 bytes, Stack size 80 bytes, lparser.o(i.constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384 + Unknown Stack Size
<LI>Call Chain = constructor &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lookahead
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listfield
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_int2fb
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
</UL>

<P><STRONG><a name="[1f3]"></a>enterblock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lparser.o(i.enterblock))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>

<P><STRONG><a name="[218]"></a>enterlevel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lparser.o(i.enterlevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = enterlevel &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk
</UL>

<P><STRONG><a name="[208]"></a>error_expected</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lparser.o(i.error_expected))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = error_expected &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>

<P><STRONG><a name="[1d0]"></a>errorlimit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lparser.o(i.errorlimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = errorlimit &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listfield
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indexupvalue
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[25f]"></a>exp1</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, lparser.o(i.exp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824 + Unknown Stack Size
<LI>Call Chain = exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
</UL>

<P><STRONG><a name="[1d2]"></a>explist1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lparser.o(i.explist1))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800 + Unknown Stack Size
<LI>Call Chain = explist1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[232]"></a>expr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lparser.o(i.expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784 + Unknown Stack Size
<LI>Call Chain = expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listfield
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist1
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp1
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
</UL>

<P><STRONG><a name="[279]"></a>field</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, lparser.o(i.field))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = field &rArr; luaK_indexed &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
</UL>

<P><STRONG><a name="[280]"></a>forbody</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, lparser.o(i.forbody))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = forbody &rArr; block &rArr;  chunk (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
</UL>

<P><STRONG><a name="[283]"></a>forlist</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, lparser.o(i.forlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864 + Unknown Stack Size
<LI>Call Chain = forlist &rArr; explist1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist1
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
</UL>

<P><STRONG><a name="[285]"></a>fornum</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, lparser.o(i.fornum))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856 + Unknown Stack Size
<LI>Call Chain = fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp1
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
</UL>

<P><STRONG><a name="[286]"></a>forstat</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, lparser.o(i.forstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
<LI>Call Chain = forstat &rArr; forlist &rArr; explist1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[28f]"></a>funcargs</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, lparser.o(i.funcargs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = funcargs &rArr;  explist1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist1
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
</UL>

<P><STRONG><a name="[341]"></a>getbinopr</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, lparser.o(i.getbinopr))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[2a2]"></a>ifstat</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, lparser.o(i.ifstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864 + Unknown Stack Size
<LI>Call Chain = ifstat &rArr; test_then_block &rArr; cond &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[2a5]"></a>indexupvalue</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, lparser.o(i.indexupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = indexupvalue &rArr; errorlimit &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>

<P><STRONG><a name="[1d3]"></a>init_exp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lparser.o(i.init_exp))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[1f5]"></a>leaveblock</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lparser.o(i.leaveblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = leaveblock &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevars
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>

<P><STRONG><a name="[238]"></a>listfield</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lparser.o(i.listfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = listfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[2b7]"></a>localfunc</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, lparser.o(i.localfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768 + Unknown Stack Size
<LI>Call Chain = localfunc &rArr; body &rArr;  chunk (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[1f9]"></a>new_localvar</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lparser.o(i.new_localvar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = new_localvar &rArr; registerlocalvar &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerlocalvar
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[1f7]"></a>open_func</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lparser.o(i.open_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = open_func &rArr; luaH_new &rArr; setnodevector &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[1fb]"></a>parlist</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lparser.o(i.parlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = parlist &rArr; str_checkname &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; inclinenumber &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[1ce]"></a>primaryexp</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, lparser.o(i.primaryexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = primaryexp &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[1fe]"></a>pushclosure</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, lparser.o(i.pushclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = pushclosure &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[239]"></a>recfield</STRONG> (Thumb, 122 bytes, Stack size 80 bytes, lparser.o(i.recfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[32f]"></a>registerlocalvar</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, lparser.o(i.registerlocalvar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = registerlocalvar &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
</UL>

<P><STRONG><a name="[21d]"></a>removevars</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, lparser.o(i.removevars))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = removevars
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[33b]"></a>repeatstat</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, lparser.o(i.repeatstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = repeatstat &rArr;  chunk (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakstat
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[33d]"></a>retstat</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, lparser.o(i.retstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840 + Unknown Stack Size
<LI>Call Chain = retstat &rArr; explist1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist1
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[33e]"></a>simpleexp</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, lparser.o(i.simpleexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728 + Unknown Stack Size
<LI>Call Chain = simpleexp &rArr; body &rArr;  chunk (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[333]"></a>singlevar</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lparser.o(i.singlevar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = singlevar &rArr; str_checkname &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; inclinenumber &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_stringK
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
</UL>

<P><STRONG><a name="[33f]"></a>singlevaraux</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lparser.o(i.singlevaraux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = singlevaraux &rArr;  singlevaraux (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indexupvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
</UL>

<P><STRONG><a name="[219]"></a>statement</STRONG> (Thumb, 512 bytes, Stack size 80 bytes, lparser.o(i.statement))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992 + Unknown Stack Size
<LI>Call Chain = statement &rArr; assignment &rArr;  assignment (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist1
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakstat
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk
</UL>

<P><STRONG><a name="[212]"></a>str_checkname</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lparser.o(i.str_checkname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = str_checkname &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; inclinenumber &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
</UL>

<P><STRONG><a name="[264]"></a>subexpr</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, lparser.o(i.subexpr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getbinopr
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterlevel
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>

<P><STRONG><a name="[2a3]"></a>test_then_block</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lparser.o(i.test_then_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832 + Unknown Stack Size
<LI>Call Chain = test_then_block &rArr; cond &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
</UL>

<P><STRONG><a name="[1cd]"></a>testnext</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lparser.o(i.testnext))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = testnext &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; inclinenumber &rArr; luaX_syntaxerror &rArr; luaX_lexerror &rArr; luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist1
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[334]"></a>yindex</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lparser.o(i.yindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = yindex &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
</UL>

<P><STRONG><a name="[21f]"></a>close_state</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lstate.o(i.close_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = close_state &rArr; luaC_freeall &rArr; sweeplist &rArr;  sweeplist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeall
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
</UL>

<P><STRONG><a name="[75]"></a>f_luaopen</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lstate.o(i.f_luaopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = f_luaopen &rArr; luaT_init &rArr; luaS_newlstr &rArr; newlstr &rArr; luaS_resize &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstate.o(i.lua_newstate)
</UL>
<P><STRONG><a name="[222]"></a>freestack</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lstate.o(i.freestack))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = freestack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>

<P><STRONG><a name="[2f0]"></a>preinit_state</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lstate.o(i.preinit_state))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_newthread
</UL>

<P><STRONG><a name="[269]"></a>stack_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lstate.o(i.stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = stack_init &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_newthread
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[31d]"></a>newlstr</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lstring.o(i.newlstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = newlstr &rArr; luaS_resize &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>

<P><STRONG><a name="[1ca]"></a>arrayindex</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ltable.o(i.arrayindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = arrayindex &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
</UL>

<P><STRONG><a name="[23d]"></a>countint</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ltable.o(i.countint))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = countint &rArr; arrayindex &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_log2
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayindex
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
</UL>

<P><STRONG><a name="[27c]"></a>findindex</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ltable.o(i.findindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = findindex &rArr; luaG_runerror &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawequalObj
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayindex
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
</UL>

<P><STRONG><a name="[2a1]"></a>hashnum</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ltable.o(i.hashnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hashnum &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getnum
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>

<P><STRONG><a name="[27d]"></a>mainposition</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ltable.o(i.mainposition))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mainposition &rArr; hashnum &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashnum
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newkey
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
</UL>

<P><STRONG><a name="[302]"></a>newkey</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ltable.o(i.newkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = newkey &rArr;  luaH_set (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setnum
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setstr
</UL>

<P><STRONG><a name="[330]"></a>rehash</STRONG> (Thumb, 236 bytes, Stack size 144 bytes, ltable.o(i.rehash))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = rehash &rArr; resize &rArr;  luaH_setnum (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newkey
</UL>

<P><STRONG><a name="[301]"></a>resize</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, ltable.o(i.resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = resize &rArr;  luaH_setnum (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setnum
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setarrayvector
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resizearray
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
</UL>

<P><STRONG><a name="[2fd]"></a>setarrayvector</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ltable.o(i.setarrayvector))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = setarrayvector &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize
</UL>

<P><STRONG><a name="[2fe]"></a>setnodevector</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ltable.o(i.setnodevector))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = setnodevector &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_log2
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize
</UL>

<P><STRONG><a name="[175]"></a>LoadBlock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lundump.o(i.LoadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = LoadBlock &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadChar
</UL>

<P><STRONG><a name="[178]"></a>LoadChar</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lundump.o(i.LoadChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = LoadChar &rArr; LoadBlock &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[179]"></a>LoadConstants</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, lundump.o(i.LoadConstants))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = LoadConstants &rArr;  LoadFunction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadChar
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[17f]"></a>LoadDebug</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, lundump.o(i.LoadDebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = LoadDebug &rArr; LoadString &rArr; LoadBlock &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[17e]"></a>LoadFunction</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, lundump.o(i.LoadFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = LoadFunction &rArr; LoadDebug &rArr; LoadString &rArr; LoadBlock &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_checkcode
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadChar
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[17a]"></a>LoadInt</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lundump.o(i.LoadInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = LoadInt &rArr; LoadBlock &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[17d]"></a>LoadString</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lundump.o(i.LoadString))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = LoadString &rArr; LoadBlock &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_openspace
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[177]"></a>error</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lundump.o(i.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>

<P><STRONG><a name="[136]"></a>Arith</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, lvm.o(i.Arith))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + In Cycle
<LI>Call Chain = Arith &rArr;  call_binTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_aritherror
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_binTM
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[202]"></a>callTM</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lvm.o(i.callTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = callTM &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_settable
</UL>

<P><STRONG><a name="[203]"></a>callTMres</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lvm.o(i.callTMres))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = callTMres &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_gettable
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalval
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_orderTM
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_binTM
</UL>

<P><STRONG><a name="[13f]"></a>call_binTM</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, lvm.o(i.call_binTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = call_binTM &rArr; callTMres &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callTMres
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arith
</UL>

<P><STRONG><a name="[205]"></a>call_orderTM</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lvm.o(i.call_orderTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = call_orderTM &rArr;  callTMres (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawequalObj
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callTMres
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessequal
</UL>

<P><STRONG><a name="[296]"></a>get_compTM</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, lvm.o(i.get_compTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_compTM &rArr; luaO_rawequalObj &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawequalObj
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalval
</UL>

<P><STRONG><a name="[2ab]"></a>l_strcmp</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lvm.o(i.l_strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = l_strcmp &rArr; strcoll
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessequal
</UL>

<P><STRONG><a name="[2ac]"></a>lessequal</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lvm.o(i.lessequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lessequal &rArr; call_orderTM &rArr;  callTMres (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_orderTM
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[322]"></a>traceexec</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lvm.o(i.traceexec))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = traceexec &rArr; luaD_callhook &rArr; luaD_growstack &rArr; luaD_reallocstack &rArr; luaM_realloc_ &rArr; luaD_throw &rArr; luaF_close &rArr; luaC_linkupval &rArr; luaC_barrierf &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callhook
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[356]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[348]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[fc]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[5c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[109]"></a>_fp_value</STRONG> (Thumb, 508 bytes, Stack size 88 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[111]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
