<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\VirtualCOMPort.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\VirtualCOMPort.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Sun Sep 30 11:14:11 2018
<BR><P>
<H3>Maximum Stack Usage =      10192 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
searcher_Croot &rArr; findfile &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[1fb]">luaV_concat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c3]">luaS_newlstr</a><BR>
 <LI><a href="#[1b9]">luaO_tostring</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c3]">luaS_newlstr</a><BR>
 <LI><a href="#[2da]">luaG_tointerror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d5]">luaG_runerror</a><BR>
 <LI><a href="#[2d2]">luaO_pushfstring</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c6]">luaO_pushvfstring</a><BR>
 <LI><a href="#[2c8]">getobjname</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c8]">getobjname</a><BR>
 <LI><a href="#[2c7]">kname</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c8]">getobjname</a><BR>
 <LI><a href="#[2d9]">luaG_opinterror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d6]">luaG_typeerror</a><BR>
 <LI><a href="#[2d8]">luaG_concaterror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d6]">luaG_typeerror</a><BR>
 <LI><a href="#[45d]">luaT_callbinTM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45c]">luaT_callTM</a><BR>
 <LI><a href="#[328]">luaH_free</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e3]">luaM_realloc_</a><BR>
 <LI><a href="#[329]">luaE_freethread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e3]">luaM_realloc_</a><BR>
 <LI><a href="#[311]">reallymarkobject</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[311]">reallymarkobject</a><BR>
 <LI><a href="#[2f8]">luaF_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e3]">luaM_realloc_</a><BR>
 <LI><a href="#[409]">freestack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e3]">luaM_realloc_</a><BR>
 <LI><a href="#[2e7]">luaE_freeCI</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e3]">luaM_realloc_</a><BR>
 <LI><a href="#[206]">luaC_upvdeccount</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e3]">luaM_realloc_</a><BR>
 <LI><a href="#[326]">freeLclosure</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e3]">luaM_realloc_</a><BR>
 <LI><a href="#[310]">luaF_freeproto</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e3]">luaM_realloc_</a><BR>
 <LI><a href="#[327]">freeobj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e3]">luaM_realloc_</a><BR>
 <LI><a href="#[2e8]">luaE_shrinkCI</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e3]">luaM_realloc_</a><BR>
 <LI><a href="#[2e1]">luaD_reallocstack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e2]">luaM_toobig</a><BR>
 <LI><a href="#[2de]">seterrorobj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c3]">luaS_newlstr</a><BR>
 <LI><a href="#[2d3]">luaD_throw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d3]">luaD_throw</a><BR>
 <LI><a href="#[32e]">luaS_resize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e2]">luaM_toobig</a><BR>
 <LI><a href="#[19c]">luaD_growstack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d5]">luaG_runerror</a><BR>
 <LI><a href="#[3a3]">pushstr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c3]">luaS_newlstr</a><BR>
 <LI><a href="#[1c6]">luaO_pushvfstring</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d5]">luaG_runerror</a><BR>
 <LI><a href="#[1f7]">luaG_errormsg</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1eb]">luaD_callnoyield</a><BR>
 <LI><a href="#[1fd]">luaV_objlen</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45c]">luaT_callTM</a><BR>
 <LI><a href="#[2f3]">luaV_execute</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1dd]">luaV_finishset</a><BR>
 <LI><a href="#[1cc]">luaV_finishget</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d0]">luaH_get</a><BR>
 <LI><a href="#[1e2]">luaH_set</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d0]">luaH_get</a><BR>
 <LI><a href="#[1d8]">luaH_resize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e4]">luaH_setint</a><BR>
 <LI><a href="#[1cb]">luaH_getstr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44f]">getgeneric</a><BR>
 <LI><a href="#[2ef]">luaD_precall</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ef]">luaD_precall</a><BR>
 <LI><a href="#[230]">resizebox</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[230]">resizebox</a><BR>
 <LI><a href="#[207]">findfield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[207]">findfield</a><BR>
 <LI><a href="#[356]">txtToken</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[357]">save</a><BR>
 <LI><a href="#[406]">test_then_block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ea]">statlist</a><BR>
 <LI><a href="#[3f5]">skipnoopstat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f6]">statement</a><BR>
 <LI><a href="#[3ec]">subexpr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ec]">subexpr</a><BR>
 <LI><a href="#[3e9]">body</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ea]">statlist</a><BR>
 <LI><a href="#[3e6]">primaryexp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3dc]">expr</a><BR>
 <LI><a href="#[3c7]">singlevaraux</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c7]">singlevaraux</a><BR>
 <LI><a href="#[3e4]">explist</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3dc]">expr</a><BR>
 <LI><a href="#[3de]">recfield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3dc]">expr</a><BR>
 <LI><a href="#[3dd]">yindex</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3dc]">expr</a><BR>
 <LI><a href="#[3db]">listfield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3dc]">expr</a><BR>
 <LI><a href="#[3ff]">block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ea]">statlist</a><BR>
 <LI><a href="#[3fe]">repeatstat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ea]">statlist</a><BR>
 <LI><a href="#[3f0]">assignment</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f0]">assignment</a><BR>
 <LI><a href="#[46c]">LoadProtos</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46b]">LoadFunction</a><BR>
 <LI><a href="#[30a]">DumpProtos</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[309]">DumpFunction</a><BR>
 <LI><a href="#[425]">max_expand</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[421]">match</a><BR>
 <LI><a href="#[421]">match</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[421]">match</a><BR>
 <LI><a href="#[424]">start_capture</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[421]">match</a><BR>
 <LI><a href="#[423]">end_capture</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[421]">match</a><BR>
 <LI><a href="#[420]">min_expand</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[421]">match</a><BR>
 <LI><a href="#[45a]">auxsort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45a]">auxsort</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[58]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">PendSV_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5a]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[1f]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM1_CC_IRQHandler</a> from bsp_timer.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM2_IRQHandler</a> from bsp_timer.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM3_IRQHandler</a> from bsp_timer.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM4_IRQHandler</a> from bsp_timer.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">TIM6_IRQHandler</a> from bsp_timer.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">TIM8_CC_IRQHandler</a> from bsp_timer.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">USART1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[78]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[77]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[7b]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[7c]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[5e]">boxgc</a> from lauxlib.o(.text) referenced from lauxlib.o(.text)
 <LI><a href="#[10e]">byteoffset</a> from lutf8lib.o(.text) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[10f]">codepoint</a> from lutf8lib.o(.text) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[a0]">db_debug</a> from ldblib.o(.text) referenced from ldblib.o(.constdata)
 <LI><a href="#[a2]">db_gethook</a> from ldblib.o(.text) referenced from ldblib.o(.constdata)
 <LI><a href="#[a3]">db_getinfo</a> from ldblib.o(.text) referenced from ldblib.o(.constdata)
 <LI><a href="#[a4]">db_getlocal</a> from ldblib.o(.text) referenced from ldblib.o(.constdata)
 <LI><a href="#[a6]">db_getmetatable</a> from ldblib.o(.text) referenced from ldblib.o(.constdata)
 <LI><a href="#[a5]">db_getregistry</a> from ldblib.o(.text) referenced from ldblib.o(.constdata)
 <LI><a href="#[a7]">db_getupvalue</a> from ldblib.o(.text) referenced from ldblib.o(.constdata)
 <LI><a href="#[a1]">db_getuservalue</a> from ldblib.o(.text) referenced from ldblib.o(.constdata)
 <LI><a href="#[ab]">db_sethook</a> from ldblib.o(.text) referenced from ldblib.o(.constdata)
 <LI><a href="#[ac]">db_setlocal</a> from ldblib.o(.text) referenced from ldblib.o(.constdata)
 <LI><a href="#[ad]">db_setmetatable</a> from ldblib.o(.text) referenced from ldblib.o(.constdata)
 <LI><a href="#[ae]">db_setupvalue</a> from ldblib.o(.text) referenced from ldblib.o(.constdata)
 <LI><a href="#[aa]">db_setuservalue</a> from ldblib.o(.text) referenced from ldblib.o(.constdata)
 <LI><a href="#[af]">db_traceback</a> from ldblib.o(.text) referenced from ldblib.o(.constdata)
 <LI><a href="#[a9]">db_upvalueid</a> from ldblib.o(.text) referenced from ldblib.o(.constdata)
 <LI><a href="#[a8]">db_upvaluejoin</a> from ldblib.o(.text) referenced from ldblib.o(.constdata)
 <LI><a href="#[66]">dofilecont</a> from lbaselib.o(.text) referenced from lbaselib.o(.text)
 <LI><a href="#[6d]">dothecall</a> from lgc.o(.text) referenced from lgc.o(.text)
 <LI><a href="#[5d]">f_call</a> from lapi.o(.text) referenced from lapi.o(.text)
 <LI><a href="#[c5]">f_flush</a> from liolib.o(.text) referenced from liolib.o(.constdata)
 <LI><a href="#[cb]">f_gc</a> from liolib.o(.text) referenced from liolib.o(.constdata)
 <LI><a href="#[c6]">f_lines</a> from liolib.o(.text) referenced from liolib.o(.constdata)
 <LI><a href="#[73]">f_luaopen</a> from lstate.o(.text) referenced from lstate.o(.text)
 <LI><a href="#[6c]">f_parser</a> from ldo.o(.text) referenced from ldo.o(.text)
 <LI><a href="#[c7]">f_read</a> from liolib.o(.text) referenced from liolib.o(.constdata)
 <LI><a href="#[c8]">f_seek</a> from liolib.o(.text) referenced from liolib.o(.constdata)
 <LI><a href="#[c9]">f_setvbuf</a> from liolib.o(.text) referenced from liolib.o(.constdata)
 <LI><a href="#[cc]">f_tostring</a> from liolib.o(.text) referenced from liolib.o(.constdata)
 <LI><a href="#[ca]">f_write</a> from liolib.o(.text) referenced from liolib.o(.constdata)
 <LI><a href="#[67]">finishpcall</a> from lbaselib.o(.text) referenced from lbaselib.o(.text)
 <LI><a href="#[7a]">fputc</a> from usart.o(.text) referenced from printfa.o(i.__0fprintf)
 <LI><a href="#[7a]">fputc</a> from usart.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[72]">gctm</a> from loadlib.o(.text) referenced from loadlib.o(.text)
 <LI><a href="#[65]">generic_reader</a> from lbaselib.o(.text) referenced from lbaselib.o(.text)
 <LI><a href="#[5f]">getF</a> from lauxlib.o(.text) referenced from lauxlib.o(.text)
 <LI><a href="#[60]">getS</a> from lauxlib.o(.text) referenced from lauxlib.o(.text)
 <LI><a href="#[fb]">gmatch</a> from lstrlib.o(.text) referenced from lstrlib.o(.constdata)
 <LI><a href="#[75]">gmatch_aux</a> from lstrlib.o(.text) referenced from lstrlib.o(.text)
 <LI><a href="#[5c]">growstack</a> from lapi.o(.text) referenced from lapi.o(.text)
 <LI><a href="#[69]">hookf</a> from ldblib.o(.text) referenced from ldblib.o(.text)
 <LI><a href="#[ba]">io_close</a> from liolib.o(.text) referenced 2 times from liolib.o(.constdata)
 <LI><a href="#[6e]">io_fclose</a> from liolib.o(.text) referenced from liolib.o(.text)
 <LI><a href="#[bb]">io_flush</a> from liolib.o(.text) referenced from liolib.o(.constdata)
 <LI><a href="#[bc]">io_input</a> from liolib.o(.text) referenced from liolib.o(.constdata)
 <LI><a href="#[bd]">io_lines</a> from liolib.o(.text) referenced from liolib.o(.constdata)
 <LI><a href="#[71]">io_noclose</a> from liolib.o(.text) referenced from liolib.o(.text)
 <LI><a href="#[be]">io_open</a> from liolib.o(.text) referenced from liolib.o(.constdata)
 <LI><a href="#[bf]">io_output</a> from liolib.o(.text) referenced from liolib.o(.constdata)
 <LI><a href="#[6f]">io_pclose</a> from liolib.o(.text) referenced from liolib.o(.text)
 <LI><a href="#[c0]">io_popen</a> from liolib.o(.text) referenced from liolib.o(.constdata)
 <LI><a href="#[c1]">io_read</a> from liolib.o(.text) referenced from liolib.o(.constdata)
 <LI><a href="#[70]">io_readline</a> from liolib.o(.text) referenced from liolib.o(.text)
 <LI><a href="#[c2]">io_tmpfile</a> from liolib.o(.text) referenced from liolib.o(.constdata)
 <LI><a href="#[c3]">io_type</a> from liolib.o(.text) referenced from liolib.o(.constdata)
 <LI><a href="#[c4]">io_write</a> from liolib.o(.text) referenced from liolib.o(.constdata)
 <LI><a href="#[64]">ipairsaux</a> from lbaselib.o(.text) referenced from lbaselib.o(.text)
 <LI><a href="#[79]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[76]">iter_aux</a> from lutf8lib.o(.text) referenced from lutf8lib.o(.text)
 <LI><a href="#[112]">iter_codes</a> from lutf8lib.o(.text) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[61]">l_alloc</a> from lauxlib.o(.text) referenced from lauxlib.o(.text)
 <LI><a href="#[e4]">ll_loadlib</a> from loadlib.o(.text) referenced from loadlib.o(.constdata)
 <LI><a href="#[e6]">ll_require</a> from loadlib.o(.text) referenced from loadlib.o(.constdata)
 <LI><a href="#[e5]">ll_searchpath</a> from loadlib.o(.text) referenced from loadlib.o(.constdata)
 <LI><a href="#[84]">luaB_assert</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[68]">luaB_auxwrap</a> from lcorolib.o(.text) referenced from lcorolib.o(.text)
 <LI><a href="#[99]">luaB_cocreate</a> from lcorolib.o(.text) referenced from lcorolib.o(.constdata)
 <LI><a href="#[85]">luaB_collectgarbage</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[9a]">luaB_coresume</a> from lcorolib.o(.text) referenced from lcorolib.o(.constdata)
 <LI><a href="#[9b]">luaB_corunning</a> from lcorolib.o(.text) referenced from lcorolib.o(.constdata)
 <LI><a href="#[9c]">luaB_costatus</a> from lcorolib.o(.text) referenced from lcorolib.o(.constdata)
 <LI><a href="#[9d]">luaB_cowrap</a> from lcorolib.o(.text) referenced from lcorolib.o(.constdata)
 <LI><a href="#[86]">luaB_dofile</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[87]">luaB_error</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[88]">luaB_getmetatable</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[89]">luaB_ipairs</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[8b]">luaB_load</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[8a]">luaB_loadfile</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[63]">luaB_next</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[63]">luaB_next</a> from lbaselib.o(.text) referenced from lbaselib.o(.text)
 <LI><a href="#[8c]">luaB_pairs</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[8d]">luaB_pcall</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[8e]">luaB_print</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[8f]">luaB_rawequal</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[91]">luaB_rawget</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[90]">luaB_rawlen</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[92]">luaB_rawset</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[93]">luaB_select</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[94]">luaB_setmetatable</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[95]">luaB_tonumber</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[96]">luaB_tostring</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[97]">luaB_type</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[98]">luaB_xpcall</a> from lbaselib.o(.text) referenced from lbaselib.o(.constdata)
 <LI><a href="#[9e]">luaB_yield</a> from lcorolib.o(.text) referenced from lcorolib.o(.constdata)
 <LI><a href="#[9f]">luaB_yieldable</a> from lcorolib.o(.text) referenced from lcorolib.o(.constdata)
 <LI><a href="#[80]">lua_ad</a> from main.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[7f]">lua_delay</a> from main.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[82]">lua_io_in</a> from main.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[81]">lua_io_out</a> from main.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[7e]">lua_led_off</a> from main.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[7d]">lua_led_on</a> from main.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[250]">lua_newstate</a> from lstate.o(.text) referenced from lstate.o(.text)
 <LI><a href="#[83]">lua_pwm_out</a> from main.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[b0]">luaopen_base</a> from lbaselib.o(.text) referenced from linit.o(.constdata)
 <LI><a href="#[b2]">luaopen_coroutine</a> from lcorolib.o(.text) referenced from linit.o(.constdata)
 <LI><a href="#[b9]">luaopen_debug</a> from ldblib.o(.text) referenced from linit.o(.constdata)
 <LI><a href="#[b4]">luaopen_io</a> from liolib.o(.text) referenced from linit.o(.constdata)
 <LI><a href="#[b7]">luaopen_math</a> from lmathlib.o(.text) referenced from linit.o(.constdata)
 <LI><a href="#[b5]">luaopen_os</a> from loslib.o(.text) referenced from linit.o(.constdata)
 <LI><a href="#[b1]">luaopen_package</a> from loadlib.o(.text) referenced from linit.o(.constdata)
 <LI><a href="#[b6]">luaopen_string</a> from lstrlib.o(.text) referenced from linit.o(.constdata)
 <LI><a href="#[b3]">luaopen_table</a> from ltablib.o(.text) referenced from linit.o(.constdata)
 <LI><a href="#[b8]">luaopen_utf8</a> from lutf8lib.o(.text) referenced from linit.o(.constdata)
 <LI><a href="#[59]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[cd]">math_abs</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[ce]">math_acos</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[cf]">math_asin</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[d0]">math_atan</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[d1]">math_ceil</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[d2]">math_cos</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[d3]">math_deg</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[d4]">math_exp</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[d6]">math_floor</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[d7]">math_fmod</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[d9]">math_log</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[da]">math_max</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[db]">math_min</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[dc]">math_modf</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[dd]">math_rad</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[de]">math_random</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[df]">math_randomseed</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[e0]">math_sin</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[e1]">math_sqrt</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[e2]">math_tan</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[d5]">math_toint</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[e3]">math_type</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[d8]">math_ult</a> from lmathlib.o(.text) referenced from lmathlib.o(.constdata)
 <LI><a href="#[eb]">os_clock</a> from loslib.o(.text) referenced from loslib.o(.constdata)
 <LI><a href="#[ec]">os_date</a> from loslib.o(.text) referenced from loslib.o(.constdata)
 <LI><a href="#[ed]">os_difftime</a> from loslib.o(.text) referenced from loslib.o(.constdata)
 <LI><a href="#[ee]">os_execute</a> from loslib.o(.text) referenced from loslib.o(.constdata)
 <LI><a href="#[ef]">os_exit</a> from loslib.o(.text) referenced from loslib.o(.constdata)
 <LI><a href="#[f0]">os_getenv</a> from loslib.o(.text) referenced from loslib.o(.constdata)
 <LI><a href="#[f1]">os_remove</a> from loslib.o(.text) referenced from loslib.o(.constdata)
 <LI><a href="#[f2]">os_rename</a> from loslib.o(.text) referenced from loslib.o(.constdata)
 <LI><a href="#[f3]">os_setlocale</a> from loslib.o(.text) referenced from loslib.o(.constdata)
 <LI><a href="#[f4]">os_time</a> from loslib.o(.text) referenced from loslib.o(.constdata)
 <LI><a href="#[f5]">os_tmpname</a> from loslib.o(.text) referenced from loslib.o(.constdata)
 <LI><a href="#[109]">pack</a> from ltablib.o(.text) referenced from ltablib.o(.constdata)
 <LI><a href="#[62]">panic</a> from lauxlib.o(.text) referenced from lauxlib.o(.text)
 <LI><a href="#[6a]">resume</a> from ldo.o(.text) referenced from ldo.o(.text)
 <LI><a href="#[e9]">searcher_C</a> from loadlib.o(.text) referenced from loadlib.o(.constdata)
 <LI><a href="#[ea]">searcher_Croot</a> from loadlib.o(.text) referenced from loadlib.o(.constdata)
 <LI><a href="#[e8]">searcher_Lua</a> from loadlib.o(.text) referenced from loadlib.o(.constdata)
 <LI><a href="#[e7]">searcher_preload</a> from loadlib.o(.text) referenced from loadlib.o(.constdata)
 <LI><a href="#[10d]">sort</a> from ltablib.o(.text) referenced from ltablib.o(.constdata)
 <LI><a href="#[f6]">str_byte</a> from lstrlib.o(.text) referenced from lstrlib.o(.constdata)
 <LI><a href="#[f7]">str_char</a> from lstrlib.o(.text) referenced from lstrlib.o(.constdata)
 <LI><a href="#[f8]">str_dump</a> from lstrlib.o(.text) referenced from lstrlib.o(.constdata)
 <LI><a href="#[f9]">str_find</a> from lstrlib.o(.text) referenced from lstrlib.o(.constdata)
 <LI><a href="#[fa]">str_format</a> from lstrlib.o(.text) referenced from lstrlib.o(.constdata)
 <LI><a href="#[fc]">str_gsub</a> from lstrlib.o(.text) referenced from lstrlib.o(.constdata)
 <LI><a href="#[fd]">str_len</a> from lstrlib.o(.text) referenced from lstrlib.o(.constdata)
 <LI><a href="#[fe]">str_lower</a> from lstrlib.o(.text) referenced from lstrlib.o(.constdata)
 <LI><a href="#[ff]">str_match</a> from lstrlib.o(.text) referenced from lstrlib.o(.constdata)
 <LI><a href="#[104]">str_pack</a> from lstrlib.o(.text) referenced from lstrlib.o(.constdata)
 <LI><a href="#[105]">str_packsize</a> from lstrlib.o(.text) referenced from lstrlib.o(.constdata)
 <LI><a href="#[100]">str_rep</a> from lstrlib.o(.text) referenced from lstrlib.o(.constdata)
 <LI><a href="#[101]">str_reverse</a> from lstrlib.o(.text) referenced from lstrlib.o(.constdata)
 <LI><a href="#[102]">str_sub</a> from lstrlib.o(.text) referenced from lstrlib.o(.constdata)
 <LI><a href="#[106]">str_unpack</a> from lstrlib.o(.text) referenced from lstrlib.o(.constdata)
 <LI><a href="#[103]">str_upper</a> from lstrlib.o(.text) referenced from lstrlib.o(.constdata)
 <LI><a href="#[107]">tconcat</a> from ltablib.o(.text) referenced from ltablib.o(.constdata)
 <LI><a href="#[108]">tinsert</a> from ltablib.o(.text) referenced from ltablib.o(.constdata)
 <LI><a href="#[10c]">tmove</a> from ltablib.o(.text) referenced from ltablib.o(.constdata)
 <LI><a href="#[10b]">tremove</a> from ltablib.o(.text) referenced from ltablib.o(.constdata)
 <LI><a href="#[10a]">unpack</a> from ltablib.o(.text) referenced from ltablib.o(.constdata)
 <LI><a href="#[6b]">unroll</a> from ldo.o(.text) referenced from ldo.o(.text)
 <LI><a href="#[110]">utfchar</a> from lutf8lib.o(.text) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[111]">utflen</a> from lutf8lib.o(.text) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[74]">writer</a> from lstrlib.o(.text) referenced from lstrlib.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[4ac]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[113]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[48d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4ad]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[4ae]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[4af]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[4b0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[4b1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[13e]"></a>WFI_SET</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Standby
</UL>

<P><STRONG><a name="[14]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[4b2]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[138]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_PriorityGroup_Config
</UL>

<P><STRONG><a name="[13a]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Cap_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Config
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>

<P><STRONG><a name="[4b3]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[4b4]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[4b5]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[119]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[145]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Cap_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_PWM_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Out_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H595_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H165_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Init
</UL>

<P><STRONG><a name="[4b6]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4b7]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4b8]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4b9]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4ba]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_led_off
</UL>

<P><STRONG><a name="[149]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Cap_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Out_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_led_on
</UL>

<P><STRONG><a name="[4bb]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4bc]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4bd]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4be]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4bf]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4c0]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4c1]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4c2]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4c3]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4c4]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[11a]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[4c5]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4c6]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4c7]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4c8]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4c9]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4ca]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4cb]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4cc]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4cd]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4ce]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4cf]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[16f]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[4d0]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4d1]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4d2]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[173]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[144]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Cap_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_PWM_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Out_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H595_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H165_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Init
</UL>

<P><STRONG><a name="[18a]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Config
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_PWM_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
</UL>

<P><STRONG><a name="[118]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[11d]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[122]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[4d3]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4d4]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4d5]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4d6]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4d7]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Init
</UL>

<P><STRONG><a name="[11e]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Init
</UL>

<P><STRONG><a name="[4d8]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4d9]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4da]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Init
</UL>

<P><STRONG><a name="[146]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Init
</UL>

<P><STRONG><a name="[4db]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4dc]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4dd]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4de]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4df]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4e0]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4e1]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[4e2]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4e3]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4e4]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4e5]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4e6]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4e7]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4e8]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4e9]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4ea]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4eb]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[4ec]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[4ed]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>ADC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[177]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[4ee]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[17a]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[4ef]"></a>ADC_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[17d]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[17e]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[17f]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[180]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[4f0]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[4f1]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[4f2]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[4f3]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[4f4]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[4f5]"></a>ADC_GetDualModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[4f6]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[4f7]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[4f8]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[4f9]"></a>ADC_ExternalTrigInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[4fa]"></a>ADC_SoftwareStartInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[4fb]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[4fc]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[4fd]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[4fe]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[4ff]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[500]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[501]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[502]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[503]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[504]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[505]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[506]"></a>ADC_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[507]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>BKP_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>

<P><STRONG><a name="[508]"></a>BKP_TamperPinLevelConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>BKP_TamperPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[171]"></a>BKP_ITConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[509]"></a>BKP_RTCOutputConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[50a]"></a>BKP_SetRTCCalibrationValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[50b]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[50c]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[50d]"></a>BKP_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[50e]"></a>BKP_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[50f]"></a>BKP_GetITStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[510]"></a>BKP_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[175]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[511]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[512]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[513]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[514]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[515]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[516]"></a>DMA_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[517]"></a>DMA_GetITStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[518]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>PWR_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[16e]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[519]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[51a]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[51b]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[51c]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[51d]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[51e]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[51f]"></a>PWR_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[18b]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Cap_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Config
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_PWM_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
</UL>

<P><STRONG><a name="[18c]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_PWM_Init
</UL>

<P><STRONG><a name="[520]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[521]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[522]"></a>TIM_OC4Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[12b]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[129]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[127]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[125]"></a>TIM_ICInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM_ICInit &rArr; TI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Cap_Init
</UL>

<P><STRONG><a name="[12e]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[523]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Config
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
</UL>

<P><STRONG><a name="[524]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[525]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[526]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspTim6Close
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Cap_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Config
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_PWM_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
</UL>

<P><STRONG><a name="[527]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspTim6Close
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Cap_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Config
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
</UL>

<P><STRONG><a name="[528]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[529]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[52a]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[52b]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[12f]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[131]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[133]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[132]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[134]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[52c]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[52d]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[52e]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[52f]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[530]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[531]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[532]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_PWM_Init
</UL>

<P><STRONG><a name="[533]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[534]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[535]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_PWM_Init
</UL>

<P><STRONG><a name="[536]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[537]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[538]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[539]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[53a]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[53b]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[53c]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[53d]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[53e]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[53f]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[540]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[541]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[542]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[543]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[544]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[545]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[546]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[547]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[548]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[549]"></a>TIM_SelectOCxM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[54a]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[54b]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[54c]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[54d]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[54e]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[54f]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[550]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[551]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[552]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[553]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[554]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[555]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[556]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[557]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[558]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[559]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[55a]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[55b]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[55c]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[55d]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[193]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[160]"></a>delay_init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[172]"></a>delay_us</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H595_WriteData
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H595_OutputEn
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H165_ReadData
</UL>

<P><STRONG><a name="[14d]"></a>delay_ms</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_delay
</UL>

<P><STRONG><a name="[55e]"></a>STM32_Flash_Capacity</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>STM32_CPUID</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[13c]"></a>MY_NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_RCC_DeInit
</UL>

<P><STRONG><a name="[137]"></a>MY_NVIC_PriorityGroup_Config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MY_NVIC_PriorityGroup_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>

<P><STRONG><a name="[139]"></a>MY_NVIC_Init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MY_NVIC_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_PriorityGroup_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Init
</UL>

<P><STRONG><a name="[13b]"></a>MY_RCC_DeInit</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_Clock_Init
</UL>

<P><STRONG><a name="[13d]"></a>SYS_Standby</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WFI_SET
</UL>

<P><STRONG><a name="[55f]"></a>SYS_SoftReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[560]"></a>STM_JTAG_Set</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>STM_Clock_Init</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_RCC_DeInit
</UL>

<P><STRONG><a name="[561]"></a>BCD_to_HEX</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[562]"></a>HEX_to_BCD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[563]"></a>DX_to_HX</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[564]"></a>HX_to_DX</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0fprintf)
<LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[140]"></a>fgetc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>

<P><STRONG><a name="[143]"></a>USARTx_Init</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USARTx_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>USART1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3ad]"></a>time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_randomizePivot
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeseed
</UL>

<P><STRONG><a name="[3b2]"></a>exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit
</UL>

<P><STRONG><a name="[3a5]"></a>system</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_execute
</UL>

<P><STRONG><a name="[156]"></a>luaopen_mylib</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = luaopen_mylib &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script_1
</UL>

<P><STRONG><a name="[59]"></a>main</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = main &rArr; do_file_script_1 &rArr; luaopen_base &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Cap_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Config
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_PWM_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Out_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H595_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H165_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script_1
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[565]"></a>OR_LogicModule_Manage</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pro_logic.o(.text), UNUSED)

<P><STRONG><a name="[566]"></a>AND_LogicModule_Manage</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pro_logic.o(.text), UNUSED)

<P><STRONG><a name="[567]"></a>NOT_LogicModule_Manage</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pro_logic.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>IO_Output_Manage</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, pro_logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IO_Output_Manage &rArr; H595_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H595_WriteData
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H595_OutputEn
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_io_out
</UL>

<P><STRONG><a name="[153]"></a>IO_Input_Manage</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, pro_logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IO_Input_Manage &rArr; H165_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H165_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_io_in
</UL>

<P><STRONG><a name="[161]"></a>LED_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bsp_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ITConfig
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_TamperPinCmd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[162]"></a>H595_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, bsp_74h595.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = H595_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16b]"></a>H595_WriteData</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bsp_74h595.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = H595_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Output_Manage
</UL>

<P><STRONG><a name="[16c]"></a>H595_OutputEn</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_74h595.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = H595_OutputEn
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Output_Manage
</UL>

<P><STRONG><a name="[163]"></a>H165_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, bsp_74h165.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = H165_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16d]"></a>H165_ReadData</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, bsp_74h165.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = H165_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Input_Manage
</UL>

<P><STRONG><a name="[164]"></a>BSP_ADC_Init</STRONG> (Thumb, 368 bytes, Stack size 72 bytes, bsp_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_ADC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[181]"></a>BSP_GetAdcValue</STRONG> (Thumb, 970 bytes, Stack size 56 bytes, bsp_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[14f]"></a>ADC_Manage</STRONG> (Thumb, 258 bytes, Stack size 88 bytes, bsp_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ADC_Manage &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_ad
</UL>

<P><STRONG><a name="[165]"></a>TIM5_PWM_Init</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM5_PWM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[166]"></a>TIM4_PWM_Init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM4_PWM_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 422 bytes, Stack size 8 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM4_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[155]"></a>PWM_OutManage</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWM_OutManage
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pwm_out
</UL>

<P><STRONG><a name="[16a]"></a>PWM_init</STRONG> (Thumb, 98 bytes, Stack size 36 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PWM_init &rArr; PWM_OutManage
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_OutManage
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[169]"></a>TIMx_Cap_Init</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TIMx_Cap_Init &rArr; TIM_ICInit &rArr; TI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM1_CC_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PolarityConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM2_IRQHandler</STRONG> (Thumb, 312 bytes, Stack size 8 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PolarityConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PolarityConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 382 bytes, Stack size 8 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM8_CC_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PolarityConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[198]"></a>PWM_InManage</STRONG> (Thumb, 700 bytes, Stack size 72 bytes, bsp_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[167]"></a>TIM6_Config</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM6_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19b]"></a>BspTim6Close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>

<P><STRONG><a name="[53]"></a>TIM6_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM6_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[568]"></a>callbackfun</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, bsp_timer.o(.text), UNUSED)

<P><STRONG><a name="[569]"></a>soft_timer_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bsp_timer.o(.text), UNUSED)

<P><STRONG><a name="[56a]"></a>soft_timer_registered</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bsp_timer.o(.text), UNUSED)

<P><STRONG><a name="[56b]"></a>set_timer</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, bsp_timer.o(.text), UNUSED)

<P><STRONG><a name="[56c]"></a>soft_timer_delete</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_timer.o(.text), UNUSED)

<P><STRONG><a name="[56d]"></a>soft_timer_exec</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bsp_timer.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>PWM_Out_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWM_Out_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19d]"></a>lua_checkstack</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = lua_checkstack &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
</UL>

<P><STRONG><a name="[2a5]"></a>lua_xmove</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lua_xmove
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;treatstackoption
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
</UL>

<P><STRONG><a name="[251]"></a>lua_atpanic</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lapi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
</UL>

<P><STRONG><a name="[253]"></a>lua_version</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[23d]"></a>lua_absindex</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lapi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_unref
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_ref
</UL>

<P><STRONG><a name="[20b]"></a>lua_gettop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dofilecont
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_max
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_min
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yield
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
</UL>

<P><STRONG><a name="[209]"></a>lua_settop</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_ref
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlibs
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfield
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getboolfield
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkclib
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noenv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmeta
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setmetatable
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
</UL>

<P><STRONG><a name="[19f]"></a>lua_rotate</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lua_rotate &rArr; reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;treatstackoption
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[1a2]"></a>lua_copy</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lua_copy &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
</UL>

<P><STRONG><a name="[1a4]"></a>lua_pushvalue</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_pushvalue &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createsearcherstable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_max
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_min
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstdfile
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmeta
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getregistry
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_codes
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[1a5]"></a>lua_type</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_type &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_ref
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optnumber
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_close
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getuservalue
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setmetatable
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[219]"></a>lua_typename</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lapi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[1a6]"></a>lua_iscfunction</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_iscfunction &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
</UL>

<P><STRONG><a name="[1a7]"></a>lua_isinteger</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_isinteger &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[1a8]"></a>lua_isnumber</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lua_isnumber &rArr; luaV_tonumber_ &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interror
</UL>

<P><STRONG><a name="[1aa]"></a>lua_isstring</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_isstring &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[1ab]"></a>lua_isuserdata</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>

<P><STRONG><a name="[1ac]"></a>lua_rawequal</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = lua_rawequal &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[1ae]"></a>lua_arith</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
</UL>

<P><STRONG><a name="[1b0]"></a>lua_compare</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = lua_compare &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_max
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_min
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
</UL>

<P><STRONG><a name="[1b3]"></a>lua_stringtonumber</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lua_stringtonumber &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
</UL>

<P><STRONG><a name="[14b]"></a>lua_tonumberx</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = lua_tonumberx &rArr; luaV_tonumber_ &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pwm_out
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_io_in
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_io_out
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_ad
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_delay
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[1b5]"></a>lua_tointegerx</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = lua_tointegerx &rArr; luaV_tointeger &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_ref
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfield
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_toint
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[1b7]"></a>lua_toboolean</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_toboolean &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getboolfield
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noenv
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
</UL>

<P><STRONG><a name="[1b8]"></a>lua_tolstring</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = lua_tolstring &rArr; luaC_step &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[1bb]"></a>lua_rawlen</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lua_rawlen &rArr; luaH_getn &rArr; unbound_search &rArr; luaH_getint
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_ref
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
</UL>

<P><STRONG><a name="[1bd]"></a>lua_tocfunction</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>

<P><STRONG><a name="[1be]"></a>lua_touserdata</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_touserdata &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkclib
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
</UL>

<P><STRONG><a name="[1bf]"></a>lua_tothread</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_tothread &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getco
</UL>

<P><STRONG><a name="[1c0]"></a>lua_topointer</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_topointer &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
</UL>

<P><STRONG><a name="[208]"></a>lua_pushnil</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lapi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_toint
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_noclose
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_type
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getuservalue
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getmetatable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>

<P><STRONG><a name="[151]"></a>lua_pushnumber</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_pushnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pwm_out
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_io_in
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_io_out
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_ad
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_difftime
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_rad
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_deg
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_exp
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sqrt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_atan
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_acos
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_asin
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_tan
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_cos
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sin
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
</UL>

<P><STRONG><a name="[21f]"></a>lua_pushinteger</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_pushinteger
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_unref
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setfield
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_toint
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsi
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_codes
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_len
</UL>

<P><STRONG><a name="[1c1]"></a>lua_pushlstring</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = lua_pushlstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnexttemplate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
</UL>

<P><STRONG><a name="[1c4]"></a>lua_pushstring</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_setlocale
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_getenv
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmpname
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsys_sym
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsys_load
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_noclose
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_eof
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_tostring
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_type
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabss
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkfield
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
</UL>

<P><STRONG><a name="[1c5]"></a>lua_pushvfstring</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = lua_pushvfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>

<P><STRONG><a name="[1c7]"></a>lua_pushfstring</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkoption
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_preload
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_tostring
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushutfchar
</UL>

<P><STRONG><a name="[1c8]"></a>lua_pushcclosure</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = lua_pushcclosure &rArr; luaF_newCclosure &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newCclosure
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createclibstable
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createsearcherstable
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cowrap
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_codes
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
</UL>

<P><STRONG><a name="[21d]"></a>lua_pushboolean</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lapi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setboolfield
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_execute
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ult
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsb
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_corunning
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yieldable
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
</UL>

<P><STRONG><a name="[2b6]"></a>lua_pushlightuserdata</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvalueid
</UL>

<P><STRONG><a name="[2aa]"></a>lua_pushthread</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lapi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_corunning
</UL>

<P><STRONG><a name="[1cd]"></a>lua_getglobal</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = lua_getglobal &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaH_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
</UL>

<P><STRONG><a name="[1cf]"></a>lua_gettable</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = lua_gettable &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[1d1]"></a>lua_getfield</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = lua_getfield &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaH_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfield
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getboolfield
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_preload
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkclib
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noenv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_close
</UL>

<P><STRONG><a name="[1d2]"></a>lua_geti</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = lua_geti &rArr; luaV_finishget &rArr;  luaH_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
</UL>

<P><STRONG><a name="[1d3]"></a>lua_rawget</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = lua_rawget &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkfield
</UL>

<P><STRONG><a name="[1d4]"></a>lua_rawgeti</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lua_rawgeti &rArr; luaH_getint
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_unref
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_ref
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
</UL>

<P><STRONG><a name="[1d5]"></a>lua_rawgetp</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = lua_rawgetp &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkclib
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
</UL>

<P><STRONG><a name="[1d6]"></a>lua_createtable</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = lua_createtable &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createclibstable
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createsearcherstable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_table
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_os
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_debug
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_coroutine
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
</UL>

<P><STRONG><a name="[1d9]"></a>lua_getmetatable</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lua_getmetatable &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getmetatable
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>

<P><STRONG><a name="[1da]"></a>lua_getuservalue</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_getuservalue &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getuservalue
</UL>

<P><STRONG><a name="[158]"></a>lua_setglobal</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = lua_setglobal &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_mylib
</UL>

<P><STRONG><a name="[1de]"></a>lua_settable</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, lapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>

<P><STRONG><a name="[1df]"></a>lua_setfield</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setboolfield
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setfield
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createclibstable
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createsearcherstable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstdfile
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmeta
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;treatstackoption
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsb
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsi
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabss
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
</UL>

<P><STRONG><a name="[1e0]"></a>lua_seti</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = lua_seti &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set2
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
</UL>

<P><STRONG><a name="[1e1]"></a>lua_rawset</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lua_rawset &rArr; luaH_set &rArr;  luaH_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
</UL>

<P><STRONG><a name="[1e3]"></a>lua_rawseti</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = lua_rawseti &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_unref
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_ref
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createsearcherstable
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
</UL>

<P><STRONG><a name="[1e5]"></a>lua_rawsetp</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lua_rawsetp &rArr; luaH_set &rArr;  luaH_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createclibstable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
</UL>

<P><STRONG><a name="[1e6]"></a>lua_setmetatable</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lua_setmetatable &rArr; luaC_checkfinalizer &rArr; sweeptolive &rArr; sweeplist &rArr; freeobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createclibstable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setmetatable
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
</UL>

<P><STRONG><a name="[1e8]"></a>lua_setuservalue</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lua_setuservalue &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
</UL>

<P><STRONG><a name="[1e9]"></a>lua_callk</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = lua_callk &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[15d]"></a>lua_pcallk</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = lua_pcallk &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script_1
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
</UL>

<P><STRONG><a name="[1ed]"></a>lua_load</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = lua_load &rArr; luaD_protectedparser &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
</UL>

<P><STRONG><a name="[1f1]"></a>lua_dump</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lua_dump &rArr; luaU_dump &rArr; DumpFunction &rArr; DumpConstants &rArr; DumpString &rArr; DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
</UL>

<P><STRONG><a name="[2a4]"></a>lua_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lapi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
</UL>

<P><STRONG><a name="[1f3]"></a>lua_gc</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = lua_gc &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
</UL>

<P><STRONG><a name="[1f6]"></a>lua_error</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lua_error &rArr; luaG_errormsg &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
</UL>

<P><STRONG><a name="[1f8]"></a>lua_next</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = lua_next &rArr; luaH_next &rArr; findindex &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[1fa]"></a>lua_concat</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
</UL>

<P><STRONG><a name="[1fc]"></a>lua_len</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = lua_len &rArr; luaV_objlen &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
</UL>

<P><STRONG><a name="[231]"></a>lua_getallocf</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
</UL>

<P><STRONG><a name="[56e]"></a>lua_setallocf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lapi.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>lua_newuserdata</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = lua_newuserdata &rArr; luaS_newudata &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newprefile
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
</UL>

<P><STRONG><a name="[200]"></a>lua_getupvalue</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lua_getupvalue &rArr; aux_upvalue
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_upvalue
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
</UL>

<P><STRONG><a name="[202]"></a>lua_setupvalue</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lua_setupvalue &rArr; luaC_upvalbarrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_upvalue
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
</UL>

<P><STRONG><a name="[204]"></a>lua_upvalueid</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lua_upvalueid &rArr; getupvalref &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getupvalref
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvalueid
</UL>

<P><STRONG><a name="[205]"></a>lua_upvaluejoin</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lua_upvaluejoin &rArr; luaC_upvalbarrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvdeccount
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getupvalref
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
</UL>

<P><STRONG><a name="[211]"></a>luaL_where</STRONG> (Thumb, 64 bytes, Stack size 112 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
</UL>

<P><STRONG><a name="[212]"></a>luaL_error</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfield
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmpname
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackint
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnumlimit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanformat
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_capture
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbalance
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;classend
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capture_to_close
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_capture
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
</UL>

<P><STRONG><a name="[213]"></a>luaL_checkstack</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
</UL>

<P><STRONG><a name="[214]"></a>luaL_traceback</STRONG> (Thumb, 228 bytes, Stack size 136 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = luaL_traceback &rArr; pushfuncname &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlevel
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
</UL>

<P><STRONG><a name="[215]"></a>luaL_argerror</STRONG> (Thumb, 122 bytes, Stack size 120 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interror
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkoption
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checktime
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_max
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_min
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setmetatable
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getco
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushutfchar
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
</UL>

<P><STRONG><a name="[217]"></a>luaL_getmetafield</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = luaL_getmetafield &rArr; lua_rawget &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
</UL>

<P><STRONG><a name="[21b]"></a>luaL_fileresult</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = luaL_fileresult &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rename
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_remove
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_flush
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_flush
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_tmpfile
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_fclose
</UL>

<P><STRONG><a name="[220]"></a>luaL_execresult</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = luaL_execresult &rArr; luaL_fileresult &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_execute
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pclose
</UL>

<P><STRONG><a name="[221]"></a>luaL_newmetatable</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmeta
</UL>

<P><STRONG><a name="[222]"></a>luaL_setmetatable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = luaL_setmetatable &rArr; lua_getfield &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaH_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newprefile
</UL>

<P><STRONG><a name="[223]"></a>luaL_testudata</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = luaL_testudata &rArr; lua_rawequal &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_type
</UL>

<P><STRONG><a name="[224]"></a>luaL_checkudata</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_noclose
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pclose
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_fclose
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_close
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_tostring
</UL>

<P><STRONG><a name="[225]"></a>luaL_checklstring</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_getenv
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rename
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_remove
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_preload
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_codes
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reverse
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_len
</UL>

<P><STRONG><a name="[226]"></a>luaL_optlstring</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_setlocale
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_execute
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
</UL>

<P><STRONG><a name="[228]"></a>luaL_checkoption</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_setlocale
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
</UL>

<P><STRONG><a name="[229]"></a>luaL_checktype</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
</UL>

<P><STRONG><a name="[22a]"></a>luaL_checkany</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_toint
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_type
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setupvalue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getmetatable
</UL>

<P><STRONG><a name="[22b]"></a>luaL_checknumber</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optnumber
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_randomseed
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_rad
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_deg
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_exp
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sqrt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_atan
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_acos
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_asin
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_tan
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_cos
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sin
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[22c]"></a>luaL_optnumber</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = luaL_optnumber &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_atan
</UL>

<P><STRONG><a name="[22e]"></a>luaL_checkinteger</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interror
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checktime
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ult
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushutfchar
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
</UL>

<P><STRONG><a name="[22f]"></a>luaL_optinteger</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
</UL>

<P><STRONG><a name="[233]"></a>luaL_prepbuffsize</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chars
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packint
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[235]"></a>luaL_addlstring</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer
</UL>

<P><STRONG><a name="[236]"></a>luaL_addstring</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
</UL>

<P><STRONG><a name="[237]"></a>luaL_pushresult</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = luaL_pushresult &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chars
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
</UL>

<P><STRONG><a name="[238]"></a>luaL_pushresultsize</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = luaL_pushresultsize &rArr; luaL_pushresult &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reverse
</UL>

<P><STRONG><a name="[239]"></a>luaL_addvalue</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[23b]"></a>luaL_buffinit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lauxlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chars
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
</UL>

<P><STRONG><a name="[23a]"></a>luaL_buffinitsize</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = luaL_buffinitsize &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reverse
</UL>

<P><STRONG><a name="[23c]"></a>luaL_ref</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, lauxlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_absindex
</UL>

<P><STRONG><a name="[23e]"></a>luaL_unref</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lauxlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_absindex
</UL>

<P><STRONG><a name="[244]"></a>luaL_loadfilex</STRONG> (Thumb, 264 bytes, Stack size 560 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = luaL_loadfilex &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipcomment
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
</UL>

<P><STRONG><a name="[245]"></a>luaL_loadbufferx</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = luaL_loadbufferx &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
</UL>

<P><STRONG><a name="[15c]"></a>luaL_loadstring</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = luaL_loadstring &rArr; luaL_loadbufferx &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script_1
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
</UL>

<P><STRONG><a name="[246]"></a>luaL_callmeta</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = luaL_callmeta &rArr; luaL_getmetafield &rArr; lua_rawget &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_absindex
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
</UL>

<P><STRONG><a name="[247]"></a>luaL_len</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = luaL_len &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_len
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
</UL>

<P><STRONG><a name="[248]"></a>luaL_tolstring</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = luaL_tolstring &rArr; luaL_callmeta &rArr; luaL_getmetafield &rArr; lua_rawget &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_topointer
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[157]"></a>luaL_setfuncs</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_mylib
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmeta
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_table
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_os
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_debug
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_coroutine
</UL>

<P><STRONG><a name="[249]"></a>luaL_getsubtable</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = luaL_getsubtable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_absindex
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
</UL>

<P><STRONG><a name="[24a]"></a>luaL_requiref</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, lauxlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlibs
</UL>

<P><STRONG><a name="[24b]"></a>luaL_gsub</STRONG> (Thumb, 100 bytes, Stack size 4192 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5936<LI>Call Chain = luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
</UL>

<P><STRONG><a name="[15a]"></a>luaL_newstate</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = luaL_newstate &rArr; lua_newstate &rArr; close_state &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_atpanic
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script_1
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
</UL>

<P><STRONG><a name="[252]"></a>luaL_checkversion_</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = luaL_checkversion_ &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_version
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_table
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_os
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_debug
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_coroutine
</UL>

<P><STRONG><a name="[b0]"></a>luaopen_base</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = luaopen_base &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script_1
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[267]"></a>luaK_codeABC</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = luaK_codeABC &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeunexpval
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_loadbool
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_conflict
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
</UL>

<P><STRONG><a name="[268]"></a>luaK_nil</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[269]"></a>luaK_concat</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
</UL>

<P><STRONG><a name="[26a]"></a>luaK_codeABx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = luaK_codeABx &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeclosure
</UL>

<P><STRONG><a name="[26b]"></a>luaK_jump</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = luaK_jump &rArr; luaK_codeABx &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[26c]"></a>luaK_ret</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = luaK_ret &rArr; luaK_codeABC &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[270]"></a>luaK_getlabel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_loadbool
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
</UL>

<P><STRONG><a name="[26f]"></a>luaK_patchtohere</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = luaK_patchtohere &rArr; luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[271]"></a>luaK_patchlist</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = luaK_patchlist &rArr; luaK_patchtohere &rArr; luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
</UL>

<P><STRONG><a name="[272]"></a>luaK_patchclose</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaK_patchclose &rArr; getjump
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movegotosout
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
</UL>

<P><STRONG><a name="[274]"></a>luaK_codek</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeextraarg
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
</UL>

<P><STRONG><a name="[275]"></a>luaK_checkstack</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = luaK_checkstack &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
</UL>

<P><STRONG><a name="[276]"></a>luaK_reserveregs</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = luaK_reserveregs &rArr; luaK_checkstack &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_conflict
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[27b]"></a>luaK_stringK</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = luaK_stringK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
</UL>

<P><STRONG><a name="[27c]"></a>luaK_intK</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
</UL>

<P><STRONG><a name="[280]"></a>luaK_setreturns</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = luaK_setreturns &rArr; luaK_reserveregs &rArr; luaK_checkstack &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlistfield
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[282]"></a>luaK_setoneret</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaK_setoneret
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[281]"></a>luaK_dischargevars</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = luaK_dischargevars &rArr; luaK_codeABC &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freereg
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setoneret
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
</UL>

<P><STRONG><a name="[288]"></a>luaK_exp2nextreg</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp1
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closelistfield
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlistfield
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeclosure
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[289]"></a>luaK_exp2anyreg</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeunexpval
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
</UL>

<P><STRONG><a name="[28a]"></a>luaK_exp2anyregup</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaK_exp2anyregup &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
</UL>

<P><STRONG><a name="[28b]"></a>luaK_exp2val</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
</UL>

<P><STRONG><a name="[28c]"></a>luaK_exp2RK</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nilK
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boolK
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_intK
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecomp
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
</UL>

<P><STRONG><a name="[28d]"></a>luaK_storevar</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = luaK_storevar &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[28e]"></a>luaK_self</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = luaK_self &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[291]"></a>luaK_goiftrue</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = luaK_goiftrue &rArr; jumponcond &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negatecondition
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
</UL>

<P><STRONG><a name="[292]"></a>luaK_goiffalse</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = luaK_goiffalse &rArr; jumponcond &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
</UL>

<P><STRONG><a name="[294]"></a>luaK_indexed</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = luaK_indexed &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
</UL>

<P><STRONG><a name="[29a]"></a>luaK_fixline</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeunexpval
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
</UL>

<P><STRONG><a name="[29d]"></a>luaK_prefix</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = luaK_prefix &rArr; codeunexpval &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeunexpval
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[29e]"></a>luaK_infix</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = luaK_infix &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonumeral
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[29f]"></a>luaK_posfix</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = luaK_posfix &rArr; codecomp &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecomp
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[2a1]"></a>luaK_setlist</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = luaK_setlist &rArr; luaK_codeABC &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeextraarg
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closelistfield
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlistfield
</UL>

<P><STRONG><a name="[b2]"></a>luaopen_coroutine</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lcorolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaopen_coroutine &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>luaopen_debug</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaopen_debug &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[2b8]"></a>lua_sethook</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_sethook
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
</UL>

<P><STRONG><a name="[2ba]"></a>lua_gethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ldebug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[2b9]"></a>lua_gethookmask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ldebug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[2bc]"></a>lua_gethookcount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ldebug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[210]"></a>lua_getstack</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lua_getstack
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlevel
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
</UL>

<P><STRONG><a name="[2b2]"></a>lua_getlocal</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lua_getlocal &rArr; findlocal &rArr; luaF_getlocalname
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_getlocalname
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlocal
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapextra
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
</UL>

<P><STRONG><a name="[2b3]"></a>lua_setlocal</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lua_setlocal &rArr; findlocal &rArr; luaF_getlocalname
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlocal
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapextra
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
</UL>

<P><STRONG><a name="[20c]"></a>lua_getinfo</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapextra
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[1f7]"></a>luaG_errormsg</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = luaG_errormsg &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>

<P><STRONG><a name="[2d4]"></a>luaG_addinfo</STRONG> (Thumb, 58 bytes, Stack size 88 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>

<P><STRONG><a name="[2d5]"></a>luaG_runerror</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentline
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_div
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackerror
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_yieldk
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
</UL>

<P><STRONG><a name="[2d6]"></a>luaG_typeerror</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryfuncTM
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_opinterror
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_concaterror
</UL>

<P><STRONG><a name="[2d8]"></a>luaG_concaterror</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaG_concaterror &rArr;  luaG_typeerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>

<P><STRONG><a name="[2d9]"></a>luaG_opinterror</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + In Cycle
<LI>Call Chain = luaG_opinterror &rArr;  luaG_typeerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>

<P><STRONG><a name="[2da]"></a>luaG_tointerror</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + In Cycle
<LI>Call Chain = luaG_tointerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>

<P><STRONG><a name="[2db]"></a>luaG_ordererror</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = luaG_ordererror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
</UL>

<P><STRONG><a name="[2dc]"></a>luaG_traceexec</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = luaG_traceexec &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[2d3]"></a>luaD_throw</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seterrorobj
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkmode
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackerror
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_yieldk
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[19e]"></a>luaD_rawrunprotected</STRONG> (Thumb, 54 bytes, Stack size 424 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
</UL>

<P><STRONG><a name="[2e1]"></a>luaD_reallocstack</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + In Cycle
<LI>Call Chain = luaD_reallocstack &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctstack
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
</UL>

<P><STRONG><a name="[19c]"></a>luaD_growstack</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;growstack
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>

<P><STRONG><a name="[2e5]"></a>luaD_shrinkstack</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = luaD_shrinkstack &rArr; luaD_reallocstack &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_shrinkCI
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freeCI
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackinuse
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversethread
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover
</UL>

<P><STRONG><a name="[2e9]"></a>luaD_inctop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = luaD_inctop &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushstr
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
</UL>

<P><STRONG><a name="[2dd]"></a>luaD_hook</STRONG> (Thumb, 138 bytes, Stack size 136 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callhook
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
</UL>

<P><STRONG><a name="[2ed]"></a>luaD_poscall</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = luaD_poscall &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveresults
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishCcall
</UL>

<P><STRONG><a name="[2ef]"></a>luaD_precall</STRONG> (Thumb, 456 bytes, Stack size 48 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + In Cycle
<LI>Call Chain = luaD_precall &rArr;  luaD_precall (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_extendCI
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryfuncTM
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_varargs
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callhook
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
</UL>

<P><STRONG><a name="[1ea]"></a>luaD_call</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackerror
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>

<P><STRONG><a name="[1eb]"></a>luaD_callnoyield</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_call
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dothecall
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>

<P><STRONG><a name="[2a6]"></a>lua_resume</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = lua_resume &rArr; resume_error &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_error
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seterrorobj
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
</UL>

<P><STRONG><a name="[2a9]"></a>lua_isyieldable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ldo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yieldable
</UL>

<P><STRONG><a name="[2a8]"></a>lua_yieldk</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = lua_yieldk &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yield
</UL>

<P><STRONG><a name="[1ec]"></a>luaD_pcall</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seterrorobj
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>

<P><STRONG><a name="[1ef]"></a>luaD_protectedparser</STRONG> (Thumb, 150 bytes, Stack size 88 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = luaD_protectedparser &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>

<P><STRONG><a name="[1f2]"></a>luaU_dump</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, ldump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = luaU_dump &rArr; DumpFunction &rArr; DumpConstants &rArr; DumpString &rArr; DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpHeader
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_dump
</UL>

<P><STRONG><a name="[1c9]"></a>luaF_newCclosure</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = luaF_newCclosure &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>

<P><STRONG><a name="[30d]"></a>luaF_newLclosure</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = luaF_newLclosure &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
</UL>

<P><STRONG><a name="[2fe]"></a>luaF_initupvals</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = luaF_initupvals &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[30e]"></a>luaF_findupval</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = luaF_findupval &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
</UL>

<P><STRONG><a name="[2f8]"></a>luaF_close</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = luaF_close &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>

<P><STRONG><a name="[30f]"></a>luaF_newproto</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = luaF_newproto &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addprototype
</UL>

<P><STRONG><a name="[310]"></a>luaF_freeproto</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaF_freeproto &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[2c2]"></a>luaF_getlocalname</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, lfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaF_getlocalname
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlocal
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getlocal
</UL>

<P><STRONG><a name="[1a3]"></a>luaC_barrier_</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setuservalue
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addprototype
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerlocalvar
</UL>

<P><STRONG><a name="[1dc]"></a>luaC_barrierback_</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lgc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settable
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[1f0]"></a>luaC_upvalbarrier_</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = luaC_upvalbarrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvaluejoin
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
</UL>

<P><STRONG><a name="[35a]"></a>luaC_fix</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lgc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
</UL>

<P><STRONG><a name="[30c]"></a>luaC_newobj</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newCclosure
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstrobj
</UL>

<P><STRONG><a name="[206]"></a>luaC_upvdeccount</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaC_upvdeccount &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvaluejoin
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeLclosure
</UL>

<P><STRONG><a name="[1e7]"></a>luaC_checkfinalizer</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = luaC_checkfinalizer &rArr; sweeptolive &rArr; sweeplist &rArr; freeobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeptolive
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
</UL>

<P><STRONG><a name="[337]"></a>luaC_freeallobjects</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = luaC_freeallobjects &rArr; callallpendingfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separatetobefnz
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callallpendingfinalizers
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>

<P><STRONG><a name="[33c]"></a>luaC_runtilstate</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>

<P><STRONG><a name="[1ba]"></a>luaC_step</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = luaC_step &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdebt
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpause
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runafewfinalizers
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[1f5]"></a>luaC_fullgc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_runtilstate
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entersweep
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpause
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>

<P><STRONG><a name="[15b]"></a>luaL_openlibs</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, linit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
</UL>

<P><STRONG><a name="[b4]"></a>luaopen_io</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = luaopen_io &rArr; createmeta &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstdfile
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmeta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[355]"></a>luaX_token2str</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = luaX_token2str &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txtToken
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
</UL>

<P><STRONG><a name="[359]"></a>luaX_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = luaX_init &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[25f]"></a>luaX_syntaxerror</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exprstat
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semerror
</UL>

<P><STRONG><a name="[35b]"></a>luaX_newstring</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvarliteral_
</UL>

<P><STRONG><a name="[35d]"></a>luaX_setinput</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = luaX_setinput &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
</UL>

<P><STRONG><a name="[36d]"></a>luaX_next</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = luaX_next &rArr; llex &rArr; read_long_string &rArr; luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
</UL>

<P><STRONG><a name="[36e]"></a>luaX_lookahead</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = luaX_lookahead &rArr; llex &rArr; read_long_string &rArr; luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
</UL>

<P><STRONG><a name="[b7]"></a>luaopen_math</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaopen_math &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[2e3]"></a>luaM_realloc_</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, lmem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvdeccount
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_free
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeLclosure
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeproto
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_findupval
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_initupvals
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_shrinkCI
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freeCI
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_extendCI
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUpvalues
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCode
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setarrayvector
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[2e2]"></a>luaM_toobig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lmem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUpvalues
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCode
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setarrayvector
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[266]"></a>luaM_growaux_</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, lmem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addprototype
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlabelentry
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerlocalvar
</UL>

<P><STRONG><a name="[b1]"></a>luaopen_package</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5984<LI>Call Chain = luaopen_package &rArr; setpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createclibstable
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createsearcherstable
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[3e2]"></a>luaO_int2fb</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lobject.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[47d]"></a>luaO_fb2int</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lobject.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[446]"></a>luaO_ceillog2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lobject.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
</UL>

<P><STRONG><a name="[1af]"></a>luaO_arith</STRONG> (Thumb, 402 bytes, Stack size 64 bytes, lobject.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = luaO_arith &rArr; intarith &rArr; luaV_mod &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_arith
</UL>

<P><STRONG><a name="[365]"></a>luaO_hexavalue</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lobject.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2int
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
</UL>

<P><STRONG><a name="[1b4]"></a>luaO_str2num</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, lobject.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2int
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
</UL>

<P><STRONG><a name="[369]"></a>luaO_utf8esc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lobject.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaO_utf8esc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8esc
</UL>

<P><STRONG><a name="[1b9]"></a>luaO_tostring</STRONG> (Thumb, 126 bytes, Stack size 88 bytes, lobject.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = luaO_tostring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
</UL>

<P><STRONG><a name="[2d2]"></a>luaO_pushfstring</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, lobject.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txtToken
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkmode
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksize
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrepeated
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undefgoto
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
</UL>

<P><STRONG><a name="[1c6]"></a>luaO_pushvfstring</STRONG> (Thumb, 506 bytes, Stack size 64 bytes, lobject.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + In Cycle
<LI>Call Chain = luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushstr
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_utf8esc
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>

<P><STRONG><a name="[2c5]"></a>luaO_chunkid</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, lobject.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaO_chunkid
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcinfo
</UL>

<P><STRONG><a name="[b5]"></a>luaopen_os</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, loslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaopen_os &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[2fd]"></a>luaY_parser</STRONG> (Thumb, 144 bytes, Stack size 168 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2488<LI>Call Chain = luaY_parser &rArr; mainfunc &rArr; statlist &rArr; statement &rArr; forstat &rArr; fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[2e7]"></a>luaE_freeCI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaE_freeCI &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
</UL>

<P><STRONG><a name="[250]"></a>lua_newstate</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, lstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = lua_newstate &rArr; close_state &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeseed
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preinit_thread
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstate.o(.text)
</UL>
<P><STRONG><a name="[1f4]"></a>luaE_setdebt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaE_setdebt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpause
</UL>

<P><STRONG><a name="[2f0]"></a>luaE_extendCI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = luaE_extendCI &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>

<P><STRONG><a name="[2e8]"></a>luaE_shrinkCI</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaE_shrinkCI &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
</UL>

<P><STRONG><a name="[2a7]"></a>lua_newthread</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = lua_newthread &rArr; stack_init &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preinit_thread
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
</UL>

<P><STRONG><a name="[329]"></a>luaE_freethread</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = luaE_freethread &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[15e]"></a>lua_close</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = lua_close &rArr; close_state &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script_1
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit
</UL>

<P><STRONG><a name="[412]"></a>luaS_eqlngstr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = luaS_eqlngstr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
</UL>

<P><STRONG><a name="[411]"></a>luaS_hash</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaS_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hashlongstr
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeseed
</UL>

<P><STRONG><a name="[413]"></a>luaS_hashlongstr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaS_hashlongstr &rArr; luaS_hash
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>

<P><STRONG><a name="[32e]"></a>luaS_resize</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = luaS_resize &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSizes
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
</UL>

<P><STRONG><a name="[339]"></a>luaS_clearcache</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaS_clearcache
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[415]"></a>luaS_createlngstrobj</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = luaS_createlngstrobj &rArr; createstrobj &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstrobj
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
</UL>

<P><STRONG><a name="[1c3]"></a>luaS_newlstr</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushstr
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seterrorobj
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
</UL>

<P><STRONG><a name="[40d]"></a>luaS_init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = luaS_init &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[32a]"></a>luaS_remove</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaS_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[1c2]"></a>luaS_new</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_error
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breaklabel
</UL>

<P><STRONG><a name="[1ff]"></a>luaS_newudata</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = luaS_newudata &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
</UL>

<P><STRONG><a name="[b6]"></a>luaopen_string</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaopen_string &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[1f9]"></a>luaH_next</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = luaH_next &rArr; findindex &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
</UL>

<P><STRONG><a name="[44d]"></a>luaH_newkey</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfreepos
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
</UL>

<P><STRONG><a name="[1ce]"></a>luaH_getint</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaH_getint
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getglobal
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unbound_search
</UL>

<P><STRONG><a name="[450]"></a>luaH_getshortstr</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
</UL>

<P><STRONG><a name="[1d0]"></a>luaH_get</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settable
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1e2]"></a>luaH_set</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = luaH_set &rArr;  luaH_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[1e4]"></a>luaH_setint</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_registry
</UL>

<P><STRONG><a name="[1d8]"></a>luaH_resize</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + In Cycle
<LI>Call Chain = luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setarrayvector
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resizearray
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_registry
</UL>

<P><STRONG><a name="[451]"></a>luaH_resizearray</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = luaH_resizearray &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1d7]"></a>luaH_new</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = luaH_new &rArr; setnodevector &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_registry
</UL>

<P><STRONG><a name="[328]"></a>luaH_free</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaH_free &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[1cb]"></a>luaH_getstr</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + In Cycle
<LI>Call Chain = luaH_getstr &rArr;  getgeneric (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1bc]"></a>luaH_getn</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = luaH_getn &rArr; unbound_search &rArr; luaH_getint
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unbound_search
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
</UL>

<P><STRONG><a name="[b3]"></a>luaopen_table</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ltablib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaopen_table &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[40e]"></a>luaT_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ltm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = luaT_init &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[31c]"></a>luaT_gettm</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ltm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = luaT_gettm &rArr; luaH_getshortstr
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
</UL>

<P><STRONG><a name="[2ec]"></a>luaT_gettmbyobj</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ltm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = luaT_gettmbyobj &rArr; luaH_getshortstr
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryfuncTM
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callbinTM
</UL>

<P><STRONG><a name="[2d7]"></a>luaT_objtypename</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ltm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
</UL>

<P><STRONG><a name="[45c]"></a>luaT_callTM</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, ltm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callbinTM
</UL>

<P><STRONG><a name="[45d]"></a>luaT_callbinTM</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, ltm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + In Cycle
<LI>Call Chain = luaT_callbinTM &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
</UL>

<P><STRONG><a name="[39a]"></a>luaT_trybinTM</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, ltm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = luaT_trybinTM &rArr; luaG_tointerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_opinterror
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_concaterror
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callbinTM
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[45e]"></a>luaT_callorderTM</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ltm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = luaT_callorderTM &rArr; luaT_callbinTM &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callbinTM
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
</UL>

<P><STRONG><a name="[2fc]"></a>luaU_undump</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, lundump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = luaU_undump &rArr; LoadFunction &rArr; LoadConstants &rArr; LoadString &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[b8]"></a>luaopen_utf8</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lutf8lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaopen_utf8 &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[1a9]"></a>luaV_tonumber_</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = luaV_tonumber_ &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_opinterror
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
</UL>

<P><STRONG><a name="[1b6]"></a>luaV_tointeger</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = luaV_tointeger &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validop
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[1cc]"></a>luaV_finishget</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + In Cycle
<LI>Call Chain = luaV_finishget &rArr;  luaH_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1dd]"></a>luaV_finishset</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settable
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1b1]"></a>luaV_lessthan</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = luaV_lessthan &rArr; luaG_ordererror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1b2]"></a>luaV_lessequal</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = luaV_lessequal &rArr; luaG_ordererror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1ad]"></a>luaV_equalobj</STRONG> (Thumb, 694 bytes, Stack size 56 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_eqlngstr
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
</UL>

<P><STRONG><a name="[1fb]"></a>luaV_concat</STRONG> (Thumb, 454 bytes, Stack size 72 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + In Cycle
<LI>Call Chain = luaV_concat &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy2buff
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishOp
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1fd]"></a>luaV_objlen</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + In Cycle
<LI>Call Chain = luaV_objlen &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_len
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[397]"></a>luaV_div</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = luaV_div &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[396]"></a>luaV_mod</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = luaV_mod &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[398]"></a>luaV_shiftl</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaV_shiftl
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[2f5]"></a>luaV_finishOp</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = luaV_finishOp &rArr; luaV_concat &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unroll
</UL>

<P><STRONG><a name="[2f3]"></a>luaV_execute</STRONG> (Thumb, 7812 bytes, Stack size 104 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + In Cycle
<LI>Call Chain = luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_div
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_fb2int
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcached
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resizearray
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unroll
</UL>

<P><STRONG><a name="[2fb]"></a>luaZ_fill</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lzio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdecesc
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next2
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next1
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
</UL>

<P><STRONG><a name="[1ee]"></a>luaZ_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lzio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaZ_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>

<P><STRONG><a name="[461]"></a>luaZ_read</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lzio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = luaZ_read &rArr; luaZ_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>

<P><STRONG><a name="[56f]"></a>_fgetc$ungetc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc_u.o(.text), UNUSED)

<P><STRONG><a name="[34d]"></a>ungetc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fgetc_u.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_eof
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
</UL>

<P><STRONG><a name="[37b]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_div
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
</UL>

<P><STRONG><a name="[43c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackint
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[570]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[47b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[571]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_str2int
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdigits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanformat
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
</UL>

<P><STRONG><a name="[79]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[259]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_str2int
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
</UL>

<P><STRONG><a name="[418]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
</UL>

<P><STRONG><a name="[382]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_randomseed
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
</UL>

<P><STRONG><a name="[383]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_randomseed
</UL>

<P><STRONG><a name="[34c]"></a>localeconv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, localeconv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkdp
</UL>

<P><STRONG><a name="[3b0]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
</UL>

<P><STRONG><a name="[3af]"></a>strftime</STRONG> (Thumb, 450 bytes, Stack size 60 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = strftime
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
</UL>

<P><STRONG><a name="[234]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkoption
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy2buff
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanformat
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[2a0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[572]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
</UL>

<P><STRONG><a name="[2b1]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnexttemplate
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checkmode
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkmode
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makemask
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanformat
</UL>

<P><STRONG><a name="[227]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnexttemplate
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checkmode
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addlenmod
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nospecials
</UL>

<P><STRONG><a name="[216]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
</UL>

<P><STRONG><a name="[427]"></a>memchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, memchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkdp
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmemfind
</UL>

<P><STRONG><a name="[3ac]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkoption
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmemfind
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_capture
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_eqlngstr
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
</UL>

<P><STRONG><a name="[475]"></a>strcoll</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strcoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcoll &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
</UL>

<P><STRONG><a name="[39f]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addlenmod
</UL>

<P><STRONG><a name="[20d]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>

<P><STRONG><a name="[257]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_str2int
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checkmode
</UL>

<P><STRONG><a name="[39e]"></a>strpbrk</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, strpbrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strpbrk
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nospecials
</UL>

<P><STRONG><a name="[21e]"></a>strerror</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
</UL>

<P><STRONG><a name="[187]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_InManage
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetAdcValue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Manage
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_InManage
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetAdcValue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Manage
</UL>

<P><STRONG><a name="[25b]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetAdcValue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Manage
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;difftime
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[485]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_InManage
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetAdcValue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Manage
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_rad
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_deg
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[189]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetAdcValue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Manage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_InManage
</UL>

<P><STRONG><a name="[183]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_InManage
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetAdcValue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Manage
</UL>

<P><STRONG><a name="[25a]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[150]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pwm_out
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_io_in
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_io_out
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_ad
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;difftime
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[296]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validop
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_io_in
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_io_out
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_delay
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[14e]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pwm_out
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_io_in
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_io_out
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_ad
</UL>

<P><STRONG><a name="[378]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_randomseed
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_InManage
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetAdcValue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Manage
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
</UL>

<P><STRONG><a name="[254]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validop
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[377]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
</UL>

<P><STRONG><a name="[376]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_InManage
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetAdcValue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Manage
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pwm_out
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[573]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[2e0]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
</UL>

<P><STRONG><a name="[2df]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>

<P><STRONG><a name="[574]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[4a9]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[575]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[47f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[482]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[576]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
</UL>

<P><STRONG><a name="[480]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[489]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>

<P><STRONG><a name="[577]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[578]"></a>__I$use$semihosting$fgetc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusesemig.o(.text), UNUSED)

<P><STRONG><a name="[481]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[486]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[484]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[483]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[498]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[579]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[48a]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[48b]"></a>_drem</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, drem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
</UL>

<P><STRONG><a name="[48c]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[114]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[57a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[488]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[490]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[77]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[48f]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[492]"></a>__0fprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[57b]"></a>__1fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[24f]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
</UL>

<P><STRONG><a name="[57c]"></a>__c89fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[57d]"></a>fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[494]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[57e]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[182]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_InManage
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetAdcValue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Manage
</UL>

<P><STRONG><a name="[57f]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[580]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[495]"></a>__0snprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[581]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[3a2]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
</UL>

<P><STRONG><a name="[582]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[583]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[496]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[584]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[136]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_CPUID
</UL>

<P><STRONG><a name="[585]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[586]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[49c]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[21c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
</UL>

<P><STRONG><a name="[587]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[24d]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_alloc
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[497]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[499]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[49a]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[49b]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[49e]"></a>__kernel_tan</STRONG> (Thumb, 586 bytes, Stack size 80 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
</UL>

<P><STRONG><a name="[49f]"></a>__malloc$realloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __malloc$realloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[4a1]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[4a2]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[4a3]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[4a4]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[4a5]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[49d]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[588]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[589]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[58a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[4aa]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[491]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[373]"></a>acos</STRONG> (Thumb, 574 bytes, Stack size 40 bytes, acos.o(i.acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = acos &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_acos
</UL>

<P><STRONG><a name="[372]"></a>asin</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = asin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_asin
</UL>

<P><STRONG><a name="[4ab]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[374]"></a>atan2</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_atan
</UL>

<P><STRONG><a name="[37a]"></a>ceil</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ceil &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
</UL>

<P><STRONG><a name="[370]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_cos
</UL>

<P><STRONG><a name="[3b1]"></a>difftime</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, difftime.o(i.difftime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = difftime &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_difftime
</UL>

<P><STRONG><a name="[381]"></a>exp</STRONG> (Thumb, 554 bytes, Stack size 48 bytes, exp.o(i.exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = exp &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_exp
</UL>

<P><STRONG><a name="[2bd]"></a>fgets</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fgets.o(i.fgets))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fgets &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
</UL>

<P><STRONG><a name="[379]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[37c]"></a>fmod</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, fmod.o(i.fmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fmod &rArr; _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[23f]"></a>fread</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, fread.o(i.fread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fread &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getF
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chars
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all
</UL>

<P><STRONG><a name="[441]"></a>frexp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
</UL>

<P><STRONG><a name="[255]"></a>fwrite</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, fwrite.o(i.fwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
</UL>

<P><STRONG><a name="[242]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(i.getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getc &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipcomment
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipBOM
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_eof
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextc
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
</UL>

<P><STRONG><a name="[37e]"></a>log</STRONG> (Thumb, 808 bytes, Stack size 96 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>

<P><STRONG><a name="[380]"></a>log10</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, log10.o(i.log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
</UL>

<P><STRONG><a name="[37f]"></a>log2</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, log2.o(i.log2))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = log2 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
</UL>

<P><STRONG><a name="[19a]"></a>pow</STRONG> (Thumb, 2478 bytes, Stack size 112 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_InManage
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[24e]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = realloc &rArr; __malloc$realloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__malloc$realloc
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_alloc
</UL>

<P><STRONG><a name="[36f]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sin
</UL>

<P><STRONG><a name="[37d]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sqrt
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[39c]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2dloc
</UL>

<P><STRONG><a name="[371]"></a>tan</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tan.o(i.tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_tan
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[116]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[115]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[12c]"></a>TI4_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[12a]"></a>TI3_Config</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[128]"></a>TI2_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[126]"></a>TI1_Config</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[7d]"></a>lua_led_on</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_led_on
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>lua_led_off</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_led_off
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>lua_delay</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = lua_delay &rArr; lua_tonumberx &rArr; luaV_tonumber_ &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>lua_ad</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = lua_ad &rArr; lua_tonumberx &rArr; luaV_tonumber_ &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Manage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>lua_io_out</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = lua_io_out &rArr; lua_tonumberx &rArr; luaV_tonumber_ &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Output_Manage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>lua_io_in</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = lua_io_in &rArr; lua_tonumberx &rArr; luaV_tonumber_ &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Input_Manage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>lua_pwm_out</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = lua_pwm_out &rArr; lua_tonumberx &rArr; luaV_tonumber_ &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_OutManage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>do_file_script</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_close
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlibs
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
</UL>

<P><STRONG><a name="[15f]"></a>do_file_script_1</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = do_file_script_1 &rArr; luaopen_base &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_close
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_mylib
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a0]"></a>index2addr</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvalueid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getupvalue
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_len
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setuservalue
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settable
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getuservalue
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_topointer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tocfunction
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isuserdata
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_iscfunction
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getupvalref
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
</UL>

<P><STRONG><a name="[5c]"></a>growstack</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = growstack &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lapi.o(.text)
</UL>
<P><STRONG><a name="[1a1]"></a>reverse</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
</UL>

<P><STRONG><a name="[1ca]"></a>auxgetstr</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = auxgetstr &rArr; luaV_finishget &rArr;  luaH_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getglobal
</UL>

<P><STRONG><a name="[1db]"></a>auxsetstr</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
</UL>

<P><STRONG><a name="[5d]"></a>f_call</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = f_call &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lapi.o(.text)
</UL>
<P><STRONG><a name="[201]"></a>aux_upvalue</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = aux_upvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getupvalue
</UL>

<P><STRONG><a name="[203]"></a>getupvalref</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, lapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = getupvalref &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvaluejoin
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvalueid
</UL>

<P><STRONG><a name="[207]"></a>findfield</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592 + In Cycle
<LI>Call Chain = findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[20a]"></a>pushglobalfuncname</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
</UL>

<P><STRONG><a name="[20e]"></a>pushfuncname</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = pushfuncname &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
</UL>

<P><STRONG><a name="[20f]"></a>lastlevel</STRONG> (Thumb, 70 bytes, Stack size 120 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lastlevel &rArr; lua_getstack
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
</UL>

<P><STRONG><a name="[218]"></a>typeerror</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
</UL>

<P><STRONG><a name="[21a]"></a>tag_error</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interror
</UL>

<P><STRONG><a name="[22d]"></a>interror</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>

<P><STRONG><a name="[230]"></a>resizebox</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + In Cycle
<LI>Call Chain = resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getallocf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boxgc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
</UL>

<P><STRONG><a name="[5e]"></a>boxgc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = boxgc &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(.text)
</UL>
<P><STRONG><a name="[232]"></a>newbox</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
</UL>

<P><STRONG><a name="[5f]"></a>getF</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = getF &rArr; fread &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(.text)
</UL>
<P><STRONG><a name="[240]"></a>errfile</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = errfile &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
</UL>

<P><STRONG><a name="[241]"></a>skipBOM</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = skipBOM &rArr; getc &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipcomment
</UL>

<P><STRONG><a name="[243]"></a>skipcomment</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = skipcomment &rArr; skipBOM &rArr; getc &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipBOM
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
</UL>

<P><STRONG><a name="[60]"></a>getS</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>l_alloc</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = l_alloc &rArr; realloc &rArr; __malloc$realloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>panic</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lauxlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = panic &rArr; lua_tolstring &rArr; luaC_step &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>luaB_print</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = luaB_print &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getglobal
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[256]"></a>b_str2int</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = b_str2int &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
</UL>

<P><STRONG><a name="[95]"></a>luaB_tonumber</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = luaB_tonumber &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_str2int
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>luaB_error</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = luaB_error &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>luaB_getmetatable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = luaB_getmetatable &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>luaB_setmetatable</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = luaB_setmetatable &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>luaB_rawequal</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = luaB_rawequal &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>luaB_rawlen</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = luaB_rawlen &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>luaB_rawget</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = luaB_rawget &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>luaB_rawset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = luaB_rawset &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>luaB_collectgarbage</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = luaB_collectgarbage &rArr; luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>luaB_type</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = luaB_type &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[25c]"></a>pairsmeta</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = pairsmeta &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
</UL>

<P><STRONG><a name="[63]"></a>luaB_next</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = luaB_next &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lbaselib.o(.constdata)
<LI> lbaselib.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>luaB_pairs</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = luaB_pairs &rArr; pairsmeta &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>ipairsaux</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = ipairsaux &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>luaB_ipairs</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = luaB_ipairs &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[25d]"></a>load_aux</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = load_aux &rArr; lua_setupvalue &rArr; luaC_upvalbarrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
</UL>

<P><STRONG><a name="[8a]"></a>luaB_loadfile</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = luaB_loadfile &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>generic_reader</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = generic_reader &rArr; luaL_checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>luaB_load</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = luaB_load &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>dofilecont</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dofilecont
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>luaB_dofile</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = luaB_dofile &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dofilecont
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>luaB_assert</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = luaB_assert &rArr; luaB_error &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>luaB_select</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = luaB_select &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>finishpcall</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = finishpcall &rArr; lua_pushvalue &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>luaB_pcall</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = luaB_pcall &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>luaB_xpcall</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = luaB_xpcall &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>luaB_tostring</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lbaselib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = luaB_tostring &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[298]"></a>tonumeral</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tonumeral
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
</UL>

<P><STRONG><a name="[25e]"></a>fixjump</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
</UL>

<P><STRONG><a name="[261]"></a>getjumpcontrol</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getjumpcontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negatecondition
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;need_value
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchtestreg
</UL>

<P><STRONG><a name="[260]"></a>patchtestreg</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = patchtestreg &rArr; getjumpcontrol
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjumpcontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevalues
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>

<P><STRONG><a name="[263]"></a>getjump</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getjump
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;need_value
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevalues
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
</UL>

<P><STRONG><a name="[262]"></a>patchlistaux</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchtestreg
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dischargejpc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
</UL>

<P><STRONG><a name="[264]"></a>dischargejpc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>

<P><STRONG><a name="[265]"></a>luaK_code</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = luaK_code &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dischargejpc
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeextraarg
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>

<P><STRONG><a name="[26d]"></a>condjump</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = condjump &rArr; luaK_jump &rArr; luaK_codeABx &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecomp
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
</UL>

<P><STRONG><a name="[26e]"></a>removevalues</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = removevalues &rArr; patchtestreg &rArr; getjumpcontrol
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchtestreg
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>

<P><STRONG><a name="[273]"></a>codeextraarg</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = codeextraarg &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
</UL>

<P><STRONG><a name="[278]"></a>freereg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
</UL>

<P><STRONG><a name="[277]"></a>freeexp</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = freeexp
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freereg
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeunexpval
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
</UL>

<P><STRONG><a name="[279]"></a>freeexps</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = freeexps
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freereg
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecomp
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
</UL>

<P><STRONG><a name="[27a]"></a>addk</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nilK
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boolK
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_intK
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_stringK
</UL>

<P><STRONG><a name="[27d]"></a>luaK_numberK</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = luaK_numberK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
</UL>

<P><STRONG><a name="[27e]"></a>boolK</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = boolK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
</UL>

<P><STRONG><a name="[27f]"></a>nilK</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = nilK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
</UL>

<P><STRONG><a name="[283]"></a>discharge2reg</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_intK
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
</UL>

<P><STRONG><a name="[284]"></a>discharge2anyreg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = discharge2anyreg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
</UL>

<P><STRONG><a name="[285]"></a>code_loadbool</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = code_loadbool &rArr; luaK_codeABC &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[286]"></a>need_value</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = need_value &rArr; getjump
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjumpcontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[287]"></a>exp2reg</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;need_value
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_loadbool
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
</UL>

<P><STRONG><a name="[28f]"></a>negatecondition</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = negatecondition &rArr; getjumpcontrol
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjumpcontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
</UL>

<P><STRONG><a name="[290]"></a>jumponcond</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = jumponcond &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
</UL>

<P><STRONG><a name="[293]"></a>codenot</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = codenot &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negatecondition
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevalues
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
</UL>

<P><STRONG><a name="[295]"></a>validop</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = validop &rArr; luaV_tointeger &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
</UL>

<P><STRONG><a name="[297]"></a>constfolding</STRONG> (Thumb, 142 bytes, Stack size 88 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = constfolding &rArr; luaO_arith &rArr; intarith &rArr; luaV_mod &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validop
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonumeral
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
</UL>

<P><STRONG><a name="[299]"></a>codeunexpval</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = codeunexpval &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
</UL>

<P><STRONG><a name="[29b]"></a>codebinexpval</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = codebinexpval &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[29c]"></a>codecomp</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, lcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = codecomp &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[2a2]"></a>getco</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcorolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = getco &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
</UL>

<P><STRONG><a name="[2a3]"></a>auxresume</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, lcorolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = auxresume &rArr; lua_resume &rArr; resume_error &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_status
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
</UL>

<P><STRONG><a name="[9a]"></a>luaB_coresume</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lcorolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = luaB_coresume &rArr; getco &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getco
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>luaB_auxwrap</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lcorolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = luaB_auxwrap &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>luaB_cocreate</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lcorolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = luaB_cocreate &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cowrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>luaB_cowrap</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcorolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = luaB_cowrap &rArr; luaB_cocreate &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>luaB_yield</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcorolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = luaB_yield &rArr; lua_yieldk &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_yieldk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>luaB_costatus</STRONG> (Thumb, 120 bytes, Stack size 112 bytes, lcorolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = luaB_costatus &rArr; getco &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_status
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getco
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>luaB_yieldable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcorolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaB_yieldable
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isyieldable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>luaB_corunning</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcorolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaB_corunning
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[2ab]"></a>checkstack</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = checkstack &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[a5]"></a>db_getregistry</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = db_getregistry &rArr; lua_pushvalue &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>db_getmetatable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = db_getmetatable &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>db_setmetatable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = db_setmetatable &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>db_getuservalue</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = db_getuservalue &rArr; lua_getuservalue &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getuservalue
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>db_setuservalue</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = db_setuservalue &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setuservalue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[2ac]"></a>getthread</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = getthread &rArr; lua_tothread &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[2ad]"></a>settabss</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = settabss &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[2ae]"></a>settabsi</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = settabsi &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[2af]"></a>settabsb</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = settabsb &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[2b0]"></a>treatstackoption</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = treatstackoption &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[a3]"></a>db_getinfo</STRONG> (Thumb, 384 bytes, Stack size 128 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = db_getinfo &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;treatstackoption
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsb
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsi
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabss
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>db_getlocal</STRONG> (Thumb, 186 bytes, Stack size 128 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = db_getlocal &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getlocal
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>db_setlocal</STRONG> (Thumb, 394 bytes, Stack size 128 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = db_setlocal &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setlocal
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[2b4]"></a>auxupvalue</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = auxupvalue &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getupvalue
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setupvalue
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getupvalue
</UL>

<P><STRONG><a name="[a7]"></a>db_getupvalue</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = db_getupvalue &rArr; auxupvalue &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>db_setupvalue</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = db_setupvalue &rArr; auxupvalue &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[2b5]"></a>checkupval</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = checkupval &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getupvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvalueid
</UL>

<P><STRONG><a name="[a9]"></a>db_upvalueid</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = db_upvalueid &rArr; checkupval &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvalueid
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlightuserdata
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>db_upvaluejoin</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = db_upvaluejoin &rArr; checkupval &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvaluejoin
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_iscfunction
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>hookf</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = hookf &rArr; lua_rawgetp &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.text)
</UL>
<P><STRONG><a name="[2b7]"></a>makemask</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = makemask
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
</UL>

<P><STRONG><a name="[2bb]"></a>unmakemask</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = unmakemask
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[ab]"></a>db_sethook</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = db_sethook &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_sethook
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makemask
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>db_gethook</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = db_gethook &rArr; lua_rawgetp &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gethookmask
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gethookcount
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gethook
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unmakemask
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>db_debug</STRONG> (Thumb, 136 bytes, Stack size 272 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = db_debug &rArr; lua_pcallk &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>db_traceback</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, ldblib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = db_traceback &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[2bf]"></a>currentpc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ldebug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcode
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlocal
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentline
</UL>

<P><STRONG><a name="[2be]"></a>currentline</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = currentline
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
</UL>

<P><STRONG><a name="[2c3]"></a>swapextra</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swapextra
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setlocal
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getlocal
</UL>

<P><STRONG><a name="[2cb]"></a>upvalname</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ldebug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getupvalname
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[2c1]"></a>findvararg</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = findvararg
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlocal
</UL>

<P><STRONG><a name="[2c0]"></a>findlocal</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = findlocal &rArr; luaF_getlocalname
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_getlocalname
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findvararg
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setlocal
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getlocal
</UL>

<P><STRONG><a name="[2c4]"></a>funcinfo</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = funcinfo &rArr; luaO_chunkid
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
</UL>

<P><STRONG><a name="[2c6]"></a>collectvalidlines</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
</UL>

<P><STRONG><a name="[2c7]"></a>kname</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = kname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[2ca]"></a>filterpc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ldebug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findsetreg
</UL>

<P><STRONG><a name="[2c9]"></a>findsetreg</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = findsetreg
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterpc
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[2c8]"></a>getobjname</STRONG> (Thumb, 408 bytes, Stack size 56 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_getlocalname
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findsetreg
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kname
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upvalname
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcode
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kname
</UL>

<P><STRONG><a name="[2cc]"></a>funcnamefromcode</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = funcnamefromcode &rArr; getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfuncname
</UL>

<P><STRONG><a name="[2cd]"></a>getfuncname</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = getfuncname &rArr; funcnamefromcode &rArr; getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcode
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
</UL>

<P><STRONG><a name="[2ce]"></a>auxgetinfo</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = auxgetinfo &rArr; getfuncname &rArr; funcnamefromcode &rArr; getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfuncname
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcinfo
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentline
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
</UL>

<P><STRONG><a name="[2d1]"></a>isinstack</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isinstack
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>

<P><STRONG><a name="[2cf]"></a>getupvalname</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getupvalname
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upvalname
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>

<P><STRONG><a name="[2d0]"></a>varinfo</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, ldebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = varinfo &rArr; getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getupvalname
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isinstack
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
</UL>

<P><STRONG><a name="[2de]"></a>seterrorobj</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = seterrorobj &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
</UL>

<P><STRONG><a name="[2e4]"></a>correctstack</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = correctstack
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
</UL>

<P><STRONG><a name="[2e6]"></a>stackinuse</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ldo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
</UL>

<P><STRONG><a name="[2ea]"></a>callhook</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = callhook &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>

<P><STRONG><a name="[2f1]"></a>adjust_varargs</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adjust_varargs
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>

<P><STRONG><a name="[2eb]"></a>tryfuncTM</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = tryfuncTM &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>

<P><STRONG><a name="[2ee]"></a>moveresults</STRONG> (Thumb, 210 bytes, Stack size 28 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = moveresults
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
</UL>

<P><STRONG><a name="[2f2]"></a>stackerror</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = stackerror &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>

<P><STRONG><a name="[2f4]"></a>finishCcall</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = finishCcall &rArr; luaD_poscall &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unroll
</UL>

<P><STRONG><a name="[6b]"></a>unroll</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = unroll &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishOp
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishCcall
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(.text)
</UL>
<P><STRONG><a name="[2f7]"></a>findpcall</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ldo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover
</UL>

<P><STRONG><a name="[2f6]"></a>recover</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = recover &rArr; luaF_close &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findpcall
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seterrorobj
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
</UL>

<P><STRONG><a name="[2f9]"></a>resume_error</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = resume_error &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
</UL>

<P><STRONG><a name="[6a]"></a>resume</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = resume &rArr; unroll &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unroll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(.text)
</UL>
<P><STRONG><a name="[2fa]"></a>checkmode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = checkmode &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[6c]"></a>f_parser</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ldo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2520<LI>Call Chain = f_parser &rArr; luaY_parser &rArr; mainfunc &rArr; statlist &rArr; statement &rArr; forstat &rArr; fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_initupvals
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkmode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(.text)
</UL>
<P><STRONG><a name="[300]"></a>DumpBlock</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ldump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpHeader
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDebug
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpCode
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInteger
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpNumber
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
</UL>

<P><STRONG><a name="[2ff]"></a>DumpByte</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ldump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpHeader
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpUpvalues
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
</UL>

<P><STRONG><a name="[301]"></a>DumpInt</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ldump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DumpInt &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpProtos
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpUpvalues
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDebug
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpCode
</UL>

<P><STRONG><a name="[302]"></a>DumpNumber</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, ldump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DumpNumber &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpHeader
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
</UL>

<P><STRONG><a name="[303]"></a>DumpInteger</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, ldump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DumpInteger &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpHeader
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
</UL>

<P><STRONG><a name="[304]"></a>DumpString</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ldump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DumpString &rArr; DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDebug
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
</UL>

<P><STRONG><a name="[305]"></a>DumpCode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ldump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DumpCode &rArr; DumpInt &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>

<P><STRONG><a name="[306]"></a>DumpConstants</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, ldump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DumpConstants &rArr; DumpString &rArr; DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInteger
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpNumber
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>

<P><STRONG><a name="[307]"></a>DumpDebug</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ldump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DumpDebug &rArr; DumpString &rArr; DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>

<P><STRONG><a name="[308]"></a>DumpUpvalues</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ldump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DumpUpvalues &rArr; DumpInt &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>

<P><STRONG><a name="[309]"></a>DumpFunction</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ldump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DumpFunction &rArr; DumpConstants &rArr; DumpString &rArr; DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpProtos
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpUpvalues
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDebug
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpCode
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpProtos
</UL>

<P><STRONG><a name="[30a]"></a>DumpProtos</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ldump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = DumpProtos &rArr;  DumpFunction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>

<P><STRONG><a name="[30b]"></a>DumpHeader</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, ldump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DumpHeader &rArr; DumpInteger &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInteger
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpNumber
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
</UL>

<P><STRONG><a name="[318]"></a>removeentry</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lgc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearvalues
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkeys
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestrongtable
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
</UL>

<P><STRONG><a name="[311]"></a>reallymarkobject</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversethread
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseLclosure
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseCclosure
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseproto
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestrongtable
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restartcollection
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remarkupvals
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markbeingfnz
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>

<P><STRONG><a name="[312]"></a>iscleared</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearvalues
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkeys
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
</UL>

<P><STRONG><a name="[313]"></a>markmt</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = markmt &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restartcollection
</UL>

<P><STRONG><a name="[314]"></a>markbeingfnz</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = markbeingfnz &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restartcollection
</UL>

<P><STRONG><a name="[315]"></a>remarkupvals</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = remarkupvals &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[316]"></a>restartcollection</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = restartcollection &rArr; markbeingfnz &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markbeingfnz
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[317]"></a>traverseweakvalue</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = traverseweakvalue &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeentry
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
</UL>

<P><STRONG><a name="[319]"></a>traverseephemeron</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeentry
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convergeephemerons
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
</UL>

<P><STRONG><a name="[31a]"></a>traversestrongtable</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = traversestrongtable &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeentry
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
</UL>

<P><STRONG><a name="[31b]"></a>traversetable</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestrongtable
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[31d]"></a>traverseproto</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = traverseproto &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[31e]"></a>traverseCclosure</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = traverseCclosure &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[31f]"></a>traverseLclosure</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = traverseLclosure &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[320]"></a>traversethread</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = traversethread &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[321]"></a>propagatemark</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversethread
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseLclosure
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseCclosure
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseproto
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
</UL>

<P><STRONG><a name="[322]"></a>propagateall</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convergeephemerons
</UL>

<P><STRONG><a name="[323]"></a>convergeephemerons</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[324]"></a>clearkeys</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = clearkeys &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeentry
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[325]"></a>clearvalues</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = clearvalues &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeentry
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[326]"></a>freeLclosure</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = freeLclosure &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvdeccount
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[327]"></a>freeobj</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = freeobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_remove
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_free
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeLclosure
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeproto
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>

<P><STRONG><a name="[32b]"></a>sweeplist</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sweeplist &rArr; freeobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweepstep
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entersweep
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeptolive
</UL>

<P><STRONG><a name="[32c]"></a>sweeptolive</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sweeptolive &rArr; sweeplist &rArr; freeobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
</UL>

<P><STRONG><a name="[32d]"></a>checkSizes</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = checkSizes &rArr; luaS_resize &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[330]"></a>udata2finalize</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lgc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>

<P><STRONG><a name="[6d]"></a>dothecall</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = dothecall &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lgc.o(.text)
</UL>
<P><STRONG><a name="[32f]"></a>GCTM</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udata2finalize
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callallpendingfinalizers
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runafewfinalizers
</UL>

<P><STRONG><a name="[331]"></a>runafewfinalizers</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[332]"></a>callallpendingfinalizers</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = callallpendingfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
</UL>

<P><STRONG><a name="[334]"></a>findlast</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lgc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separatetobefnz
</UL>

<P><STRONG><a name="[333]"></a>separatetobefnz</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = separatetobefnz
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlast
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[335]"></a>setpause</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setpause &rArr; luaE_setdebt
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>

<P><STRONG><a name="[336]"></a>entersweep</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = entersweep &rArr; sweeplist &rArr; freeobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[338]"></a>atomic</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_clearcache
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separatetobefnz
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearvalues
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkeys
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convergeephemerons
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remarkupvals
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markbeingfnz
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[33a]"></a>sweepstep</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sweepstep &rArr; sweeplist &rArr; freeobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[33b]"></a>singlestep</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, lgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweepstep
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entersweep
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runafewfinalizers
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSizes
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restartcollection
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_runtilstate
</UL>

<P><STRONG><a name="[33d]"></a>getdebt</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lgc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>

<P><STRONG><a name="[33e]"></a>l_checkmode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = l_checkmode &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
</UL>

<P><STRONG><a name="[c3]"></a>io_type</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = io_type &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>f_tostring</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = f_tostring &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[33f]"></a>tofile</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_flush
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lines
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_close
</UL>

<P><STRONG><a name="[340]"></a>newprefile</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = newprefile &rArr; luaL_setmetatable &rArr; lua_getfield &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaH_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstdfile
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newfile
</UL>

<P><STRONG><a name="[341]"></a>aux_close</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = aux_close &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_close
</UL>

<P><STRONG><a name="[ba]"></a>io_close</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = io_close &rArr; aux_close &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_close
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>f_gc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = f_gc &rArr; aux_close &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>io_fclose</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = io_fclose &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.text)
</UL>
<P><STRONG><a name="[342]"></a>newfile</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = newfile &rArr; newprefile &rArr; luaL_setmetatable &rArr; lua_getfield &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaH_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newprefile
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_tmpfile
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
</UL>

<P><STRONG><a name="[343]"></a>opencheck</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = opencheck &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newfile
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
</UL>

<P><STRONG><a name="[be]"></a>io_open</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = io_open &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newfile
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checkmode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>io_pclose</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = io_pclose &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>io_popen</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = io_popen &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newprefile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>io_tmpfile</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = io_tmpfile &rArr; newfile &rArr; newprefile &rArr; luaL_setmetatable &rArr; lua_getfield &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaH_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newfile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[344]"></a>getiofile</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = getiofile &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_flush
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read
</UL>

<P><STRONG><a name="[345]"></a>g_iofile</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = g_iofile &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_output
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_input
</UL>

<P><STRONG><a name="[bc]"></a>io_input</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = io_input &rArr; g_iofile &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>io_output</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = io_output &rArr; g_iofile &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[346]"></a>read_all</STRONG> (Thumb, 76 bytes, Stack size 4184 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5888<LI>Call Chain = read_all &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[347]"></a>read_line</STRONG> (Thumb, 396 bytes, Stack size 4192 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5896<LI>Call Chain = read_line &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[348]"></a>nextc</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nextc &rArr; getc &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test2
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdigits
</UL>

<P><STRONG><a name="[349]"></a>readdigits</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = readdigits &rArr; nextc &rArr; getc &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextc
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
</UL>

<P><STRONG><a name="[34a]"></a>test2</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = test2 &rArr; nextc &rArr; getc &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextc
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
</UL>

<P><STRONG><a name="[34b]"></a>read_number</STRONG> (Thumb, 208 bytes, Stack size 240 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = read_number &rArr; lua_stringtonumber &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test2
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdigits
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ungetc
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[34e]"></a>read_chars</STRONG> (Thumb, 74 bytes, Stack size 4184 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5888<LI>Call Chain = read_chars &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[34f]"></a>test_eof</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = test_eof &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ungetc
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[350]"></a>g_read</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5928<LI>Call Chain = g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_eof
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chars
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
</UL>

<P><STRONG><a name="[70]"></a>io_readline</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5952<LI>Call Chain = io_readline &rArr; g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.text)
</UL>
<P><STRONG><a name="[351]"></a>aux_lines</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = aux_lines &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lines
</UL>

<P><STRONG><a name="[c6]"></a>f_lines</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = f_lines &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>io_lines</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = io_lines &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>io_read</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5944<LI>Call Chain = io_read &rArr; g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>f_read</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5944<LI>Call Chain = f_read &rArr; g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[352]"></a>g_write</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = g_write &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
</UL>

<P><STRONG><a name="[c4]"></a>io_write</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = io_write &rArr; g_write &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>f_write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = f_write &rArr; g_write &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>f_seek</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = f_seek &rArr; luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>f_setvbuf</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = f_setvbuf &rArr; luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>io_flush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = io_flush &rArr; getiofile &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>f_flush</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = f_flush &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[353]"></a>createmeta</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = createmeta &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
</UL>

<P><STRONG><a name="[71]"></a>io_noclose</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = io_noclose &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.text)
</UL>
<P><STRONG><a name="[354]"></a>createstdfile</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, liolib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = createstdfile &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newprefile
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
</UL>

<P><STRONG><a name="[356]"></a>txtToken</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = txtToken &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>

<P><STRONG><a name="[358]"></a>lexerror</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txtToken
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>

<P><STRONG><a name="[357]"></a>save</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = save &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdecesc
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8esc
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next2
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txtToken
</UL>

<P><STRONG><a name="[35c]"></a>inclinenumber</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = inclinenumber &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
</UL>

<P><STRONG><a name="[35e]"></a>check_next1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_next1 &rArr; luaZ_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[35f]"></a>check_next2</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = check_next2 &rArr; save &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
</UL>

<P><STRONG><a name="[360]"></a>read_numeral</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = read_numeral &rArr; check_next2 &rArr; save &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next2
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[361]"></a>skip_sep</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = skip_sep &rArr; save &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
</UL>

<P><STRONG><a name="[362]"></a>read_long_string</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = read_long_string &rArr; luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[363]"></a>esccheck</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdecesc
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
</UL>

<P><STRONG><a name="[364]"></a>gethexa</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = gethexa &rArr; esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_hexavalue
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readhexaesc
</UL>

<P><STRONG><a name="[366]"></a>readhexaesc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = readhexaesc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
</UL>

<P><STRONG><a name="[367]"></a>readutf8esc</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_hexavalue
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8esc
</UL>

<P><STRONG><a name="[368]"></a>utf8esc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_utf8esc
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
</UL>

<P><STRONG><a name="[36a]"></a>readdecesc</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = readdecesc &rArr; esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
</UL>

<P><STRONG><a name="[36b]"></a>read_string</STRONG> (Thumb, 822 bytes, Stack size 24 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = read_string &rArr; luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdecesc
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8esc
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readhexaesc
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[36c]"></a>llex</STRONG> (Thumb, 1190 bytes, Stack size 16 bytes, llex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = llex &rArr; read_long_string &rArr; luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next1
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lookahead
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
</UL>

<P><STRONG><a name="[cd]"></a>math_abs</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = math_abs &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>math_sin</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = math_sin &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>math_cos</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = math_cos &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>math_tan</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = math_tan &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>math_asin</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = math_asin &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>math_acos</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = math_acos &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>math_atan</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = math_atan &rArr; luaL_optnumber &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optnumber
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>math_toint</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = math_toint &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[375]"></a>pushnumint</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pushnumint &rArr; __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
</UL>

<P><STRONG><a name="[d6]"></a>math_floor</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = math_floor &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>math_ceil</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = math_ceil &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>math_fmod</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = math_fmod &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>math_modf</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = math_modf &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>math_sqrt</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = math_sqrt &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>math_ult</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = math_ult &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>math_log</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = math_log &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>math_exp</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = math_exp &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>math_deg</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = math_deg &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>math_rad</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = math_rad &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>math_min</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = math_min &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>math_max</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = math_max &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>math_random</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = math_random &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>math_randomseed</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = math_randomseed &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>math_type</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lmathlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = math_type &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[38a]"></a>lsys_unloadlib</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loadlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
</UL>

<P><STRONG><a name="[384]"></a>lsys_load</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = lsys_load &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
</UL>

<P><STRONG><a name="[385]"></a>lsys_sym</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = lsys_sym &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
</UL>

<P><STRONG><a name="[386]"></a>noenv</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = noenv &rArr; lua_getfield &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaH_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
</UL>

<P><STRONG><a name="[387]"></a>setpath</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5968<LI>Call Chain = setpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noenv
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
</UL>

<P><STRONG><a name="[388]"></a>checkclib</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = checkclib &rArr; lua_rawgetp &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
</UL>

<P><STRONG><a name="[389]"></a>addtoclib</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = addtoclib &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlightuserdata
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
</UL>

<P><STRONG><a name="[72]"></a>gctm</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = gctm &rArr; luaL_len &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsys_unloadlib
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.text)
</UL>
<P><STRONG><a name="[38b]"></a>lookforfunc</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = lookforfunc &rArr; addtoclib &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkclib
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsys_sym
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsys_load
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
</UL>

<P><STRONG><a name="[e4]"></a>ll_loadlib</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = ll_loadlib &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[38e]"></a>readable</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = readable
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
</UL>

<P><STRONG><a name="[38c]"></a>pushnexttemplate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = pushnexttemplate &rArr; lua_pushlstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
</UL>

<P><STRONG><a name="[38d]"></a>searchpath</STRONG> (Thumb, 180 bytes, Stack size 4192 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 10128<LI>Call Chain = searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnexttemplate
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readable
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
</UL>

<P><STRONG><a name="[e5]"></a>ll_searchpath</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 10160<LI>Call Chain = ll_searchpath &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[38f]"></a>findfile</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 10160<LI>Call Chain = findfile &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
</UL>

<P><STRONG><a name="[390]"></a>checkload</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = checkload &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
</UL>

<P><STRONG><a name="[e8]"></a>searcher_Lua</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 10184<LI>Call Chain = searcher_Lua &rArr; findfile &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[391]"></a>loadfunc</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5968<LI>Call Chain = loadfunc &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
</UL>

<P><STRONG><a name="[e9]"></a>searcher_C</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 10184<LI>Call Chain = searcher_C &rArr; findfile &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>searcher_Croot</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 10192<LI>Call Chain = searcher_Croot &rArr; findfile &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>searcher_preload</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = searcher_preload &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[392]"></a>findloader</STRONG> (Thumb, 190 bytes, Stack size 4184 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5936<LI>Call Chain = findloader &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
</UL>

<P><STRONG><a name="[e6]"></a>ll_require</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5952<LI>Call Chain = ll_require &rArr; findloader &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[393]"></a>createsearcherstable</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = createsearcherstable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
</UL>

<P><STRONG><a name="[394]"></a>createclibstable</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, loadlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = createclibstable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
</UL>

<P><STRONG><a name="[395]"></a>intarith</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, lobject.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = intarith &rArr; luaV_mod &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_div
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
</UL>

<P><STRONG><a name="[399]"></a>numarith</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, lobject.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = numarith &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
</UL>

<P><STRONG><a name="[3a1]"></a>isneg</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lobject.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2int
</UL>

<P><STRONG><a name="[39b]"></a>l_str2dloc</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lobject.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
</UL>

<P><STRONG><a name="[39d]"></a>l_str2d</STRONG> (Thumb, 158 bytes, Stack size 232 bytes, lobject.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2dloc
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>

<P><STRONG><a name="[3a0]"></a>l_str2int</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, lobject.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = l_str2int
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isneg
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_hexavalue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>

<P><STRONG><a name="[3a3]"></a>pushstr</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lobject.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = pushstr &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>

<P><STRONG><a name="[3a4]"></a>l_checktime</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, loslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = l_checktime &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_difftime
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
</UL>

<P><STRONG><a name="[ee]"></a>os_execute</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, loslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = os_execute &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>os_remove</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, loslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = os_remove &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>os_rename</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, loslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = os_rename &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>os_tmpname</STRONG> (Thumb, 48 bytes, Stack size 272 bytes, loslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = os_tmpname &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>os_getenv</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, loslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = os_getenv &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>os_clock</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, loslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = os_clock &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[3a6]"></a>setfield</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, loslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = setfield &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setallfields
</UL>

<P><STRONG><a name="[3a7]"></a>setboolfield</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, loslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = setboolfield &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setallfields
</UL>

<P><STRONG><a name="[3a8]"></a>setallfields</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, loslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = setallfields &rArr; setboolfield &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setboolfield
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setfield
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
</UL>

<P><STRONG><a name="[3a9]"></a>getboolfield</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, loslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = getboolfield &rArr; lua_getfield &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaH_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
</UL>

<P><STRONG><a name="[3aa]"></a>getfield</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, loslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = getfield &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
</UL>

<P><STRONG><a name="[3ab]"></a>checkoption</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, loslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = checkoption &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
</UL>

<P><STRONG><a name="[ec]"></a>os_date</STRONG> (Thumb, 606 bytes, Stack size 4192 bytes, loslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6048<LI>Call Chain = os_date &rArr; l_checktime &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkoption
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setallfields
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checktime
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>os_time</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, loslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = os_time &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfield
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getboolfield
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setallfields
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>os_difftime</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, loslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = os_difftime &rArr; l_checktime &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checktime
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;difftime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>os_setlocale</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, loslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = os_setlocale &rArr; luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>os_exit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, loslib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = os_exit &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_close
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[3b3]"></a>semerror</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = semerror &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrepeated
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undefgoto
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
</UL>

<P><STRONG><a name="[3b4]"></a>error_expected</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = error_expected &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>

<P><STRONG><a name="[3b5]"></a>errorlimit</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = errorlimit &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>

<P><STRONG><a name="[3b6]"></a>checklimit</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = checklimit &rArr; errorlimit &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listfield
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterlevel
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
</UL>

<P><STRONG><a name="[3b7]"></a>testnext</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = testnext &rArr; luaX_next &rArr; llex &rArr; read_long_string &rArr; luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>

<P><STRONG><a name="[3b8]"></a>check</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = check &rArr; error_expected &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>

<P><STRONG><a name="[3b9]"></a>checknext</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = checknext &rArr; luaX_next &rArr; llex &rArr; read_long_string &rArr; luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
</UL>

<P><STRONG><a name="[3ba]"></a>check_match</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = check_match &rArr; testnext &rArr; luaX_next &rArr; llex &rArr; read_long_string &rArr; luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[3bb]"></a>str_checkname</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = str_checkname &rArr; luaX_next &rArr; llex &rArr; read_long_string &rArr; luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
</UL>

<P><STRONG><a name="[3bd]"></a>init_exp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lparser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeclosure
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
</UL>

<P><STRONG><a name="[3bc]"></a>codestring</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = codestring &rArr; luaK_stringK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_stringK
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
</UL>

<P><STRONG><a name="[3be]"></a>checkname</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = checkname &rArr; codestring &rArr; luaK_stringK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
</UL>

<P><STRONG><a name="[3bf]"></a>registerlocalvar</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = registerlocalvar &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
</UL>

<P><STRONG><a name="[3c0]"></a>new_localvar</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = new_localvar &rArr; registerlocalvar &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerlocalvar
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvarliteral_
</UL>

<P><STRONG><a name="[3c1]"></a>new_localvarliteral_</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = new_localvarliteral_ &rArr; new_localvar &rArr; registerlocalvar &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[3c3]"></a>getlocvar</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getlocvar
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchvar
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevars
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>

<P><STRONG><a name="[3c2]"></a>adjustlocalvars</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adjustlocalvars &rArr; getlocvar
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocvar
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
</UL>

<P><STRONG><a name="[3c4]"></a>removevars</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = removevars &rArr; getlocvar
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocvar
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[3c9]"></a>searchupvalue</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = searchupvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>

<P><STRONG><a name="[3c5]"></a>newupvalue</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = newupvalue &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>

<P><STRONG><a name="[3c6]"></a>searchvar</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = searchvar &rArr; getlocvar
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocvar
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>

<P><STRONG><a name="[3c8]"></a>markupval</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lparser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>

<P><STRONG><a name="[3c7]"></a>singlevaraux</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + In Cycle
<LI>Call Chain = singlevaraux &rArr;  singlevaraux (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markupval
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchvar
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchupvalue
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>

<P><STRONG><a name="[3ca]"></a>singlevar</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = singlevar &rArr; luaK_indexed &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcname
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
</UL>

<P><STRONG><a name="[3cb]"></a>adjust_assign</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = adjust_assign &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[3cc]"></a>enterlevel</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = enterlevel &rArr; checklimit &rArr; errorlimit &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[3cd]"></a>closegoto</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = closegoto &rArr; luaK_patchlist &rArr; luaK_patchtohere &rArr; luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocvar
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semerror
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findgotos
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
</UL>

<P><STRONG><a name="[3ce]"></a>findlabel</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = findlabel &rArr; closegoto &rArr; luaK_patchlist &rArr; luaK_patchtohere &rArr; luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movegotosout
</UL>

<P><STRONG><a name="[3cf]"></a>newlabelentry</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = newlabelentry &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breaklabel
</UL>

<P><STRONG><a name="[3d0]"></a>findgotos</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = findgotos &rArr; closegoto &rArr; luaK_patchlist &rArr; luaK_patchtohere &rArr; luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breaklabel
</UL>

<P><STRONG><a name="[3d1]"></a>movegotosout</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = movegotosout &rArr; findlabel &rArr; closegoto &rArr; luaK_patchlist &rArr; luaK_patchtohere &rArr; luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[3d8]"></a>enterblock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lparser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
</UL>

<P><STRONG><a name="[3d2]"></a>breaklabel</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = breaklabel &rArr; newlabelentry &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findgotos
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlabelentry
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[3d3]"></a>undefgoto</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = undefgoto &rArr; semerror &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semerror
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[3d4]"></a>leaveblock</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = leaveblock &rArr; luaK_jump &rArr; luaK_codeABx &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undefgoto
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breaklabel
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movegotosout
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevars
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[3d5]"></a>addprototype</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = addprototype &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[3d6]"></a>codeclosure</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = codeclosure &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[3d7]"></a>open_func</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = open_func
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[3d9]"></a>close_func</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = close_func &rArr; leaveblock &rArr; luaK_jump &rArr; luaK_codeABx &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[3f4]"></a>block_follow</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lparser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
</UL>

<P><STRONG><a name="[3ee]"></a>getbinopr</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, lparser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[3da]"></a>lastlistfield</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = lastlistfield &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[3db]"></a>listfield</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + In Cycle
<LI>Call Chain = listfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
</UL>

<P><STRONG><a name="[3dd]"></a>yindex</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728 + In Cycle
<LI>Call Chain = yindex &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
</UL>

<P><STRONG><a name="[3de]"></a>recfield</STRONG> (Thumb, 126 bytes, Stack size 88 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824 + In Cycle
<LI>Call Chain = recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
</UL>

<P><STRONG><a name="[3df]"></a>field</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = field &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lookahead
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listfield
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[3e0]"></a>closelistfield</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = closelistfield &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[3e1]"></a>constructor</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = constructor &rArr; field &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_int2fb
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closelistfield
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlistfield
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
</UL>

<P><STRONG><a name="[3e3]"></a>funcargs</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = funcargs &rArr; constructor &rArr; field &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[3e5]"></a>fieldsel</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = fieldsel &rArr; luaK_indexed &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcname
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[3e6]"></a>primaryexp</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816 + In Cycle
<LI>Call Chain = primaryexp &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[3e7]"></a>suffixedexp</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024<LI>Call Chain = suffixedexp &rArr; funcargs &rArr; constructor &rArr; field &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exprstat
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
</UL>

<P><STRONG><a name="[3e8]"></a>parlist</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = parlist &rArr; str_checkname &rArr; luaX_next &rArr; llex &rArr; read_long_string &rArr; luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[3e9]"></a>body</STRONG> (Thumb, 120 bytes, Stack size 88 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + In Cycle
<LI>Call Chain = body &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeclosure
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addprototype
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvarliteral_
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
</UL>

<P><STRONG><a name="[3eb]"></a>simpleexp</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048<LI>Call Chain = simpleexp &rArr; suffixedexp &rArr; funcargs &rArr; constructor &rArr; field &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[3ed]"></a>getunopr</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lparser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[3ec]"></a>subexpr</STRONG> (Thumb, 178 bytes, Stack size 64 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + In Cycle
<LI>Call Chain = subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getunopr
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getbinopr
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterlevel
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[3dc]"></a>expr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2128<LI>Call Chain = expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp1
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listfield
</UL>

<P><STRONG><a name="[3e4]"></a>explist</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696 + In Cycle
<LI>Call Chain = explist &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
</UL>

<P><STRONG><a name="[3ef]"></a>check_conflict</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = check_conflict &rArr; luaK_codeABC &rArr; luaK_code &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[3f0]"></a>assignment</STRONG> (Thumb, 296 bytes, Stack size 80 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104 + In Cycle
<LI>Call Chain = assignment &rArr;  assignment (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setoneret
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_conflict
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exprstat
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[3f1]"></a>exprstat</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = exprstat &rArr; assignment &rArr;  assignment (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[3f2]"></a>gotostat</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = gotostat &rArr; str_checkname &rArr; luaX_next &rArr; llex &rArr; read_long_string &rArr; luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlabelentry
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
</UL>

<P><STRONG><a name="[3f3]"></a>retstat</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = retstat &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[3f5]"></a>skipnoopstat</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = skipnoopstat &rArr;  statement (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
</UL>

<P><STRONG><a name="[3f7]"></a>checkrepeated</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = checkrepeated &rArr; semerror &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semerror
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
</UL>

<P><STRONG><a name="[3f8]"></a>labelstat</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = labelstat &rArr; checknext &rArr; luaX_next &rArr; llex &rArr; read_long_string &rArr; luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrepeated
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipnoopstat
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findgotos
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlabelentry
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[3f9]"></a>localstat</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = localstat &rArr; adjust_assign &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[3fa]"></a>localfunc</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = localfunc &rArr; body &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocvar
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[3fb]"></a>funcname</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = funcname &rArr; singlevar &rArr; luaK_indexed &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
</UL>

<P><STRONG><a name="[3fc]"></a>funcstat</STRONG> (Thumb, 58 bytes, Stack size 64 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = funcstat &rArr; funcname &rArr; singlevar &rArr; luaK_indexed &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcname
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[3fd]"></a>cond</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160<LI>Call Chain = cond &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
</UL>

<P><STRONG><a name="[3fe]"></a>repeatstat</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216 + In Cycle
<LI>Call Chain = repeatstat &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[3ff]"></a>block</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + In Cycle
<LI>Call Chain = block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[400]"></a>forbody</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = forbody &rArr; block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
</UL>

<P><STRONG><a name="[401]"></a>forlist</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = forlist &rArr; adjust_assign &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvarliteral_
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
</UL>

<P><STRONG><a name="[402]"></a>exp1</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168<LI>Call Chain = exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
</UL>

<P><STRONG><a name="[403]"></a>fornum</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2200<LI>Call Chain = fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_intK
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp1
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvarliteral_
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
</UL>

<P><STRONG><a name="[404]"></a>forstat</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240<LI>Call Chain = forstat &rArr; fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[405]"></a>whilestat</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208<LI>Call Chain = whilestat &rArr; cond &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[406]"></a>test_then_block</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2192 + In Cycle
<LI>Call Chain = test_then_block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipnoopstat
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
</UL>

<P><STRONG><a name="[407]"></a>ifstat</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216<LI>Call Chain = ifstat &rArr; test_then_block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[3f6]"></a>statement</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256<LI>Call Chain = statement &rArr; forstat &rArr; fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exprstat
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterlevel
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipnoopstat
</UL>

<P><STRONG><a name="[3ea]"></a>statlist</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = statlist &rArr; statement &rArr; forstat &rArr; fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[408]"></a>mainfunc</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, lparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2320<LI>Call Chain = mainfunc &rArr; statlist &rArr; statement &rArr; forstat &rArr; fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
</UL>

<P><STRONG><a name="[409]"></a>freestack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = freestack &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freeCI
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>

<P><STRONG><a name="[40a]"></a>close_state</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = close_state &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_close
</UL>

<P><STRONG><a name="[40b]"></a>init_registry</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, lstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = init_registry &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[40c]"></a>stack_init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = stack_init &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[73]"></a>f_luaopen</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = f_luaopen &rArr; init_registry &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_version
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_registry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstate.o(.text)
</UL>
<P><STRONG><a name="[40f]"></a>preinit_thread</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
</UL>

<P><STRONG><a name="[410]"></a>makeseed</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = makeseed &rArr; luaS_hash
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
</UL>

<P><STRONG><a name="[414]"></a>createstrobj</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = createstrobj &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
</UL>

<P><STRONG><a name="[416]"></a>internshrstr</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = internshrstr &rArr; createstrobj &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstrobj
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hash
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>

<P><STRONG><a name="[fd]"></a>str_len</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = str_len &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[417]"></a>posrelat</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = posrelat
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
</UL>

<P><STRONG><a name="[102]"></a>str_sub</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = str_sub &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>str_reverse</STRONG> (Thumb, 94 bytes, Stack size 4184 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6000<LI>Call Chain = str_reverse &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>str_lower</STRONG> (Thumb, 88 bytes, Stack size 4184 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6000<LI>Call Chain = str_lower &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>str_upper</STRONG> (Thumb, 88 bytes, Stack size 4184 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6000<LI>Call Chain = str_upper &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>str_rep</STRONG> (Thumb, 280 bytes, Stack size 4192 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6032<LI>Call Chain = str_rep &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>str_byte</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = str_byte &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>str_char</STRONG> (Thumb, 94 bytes, Stack size 4192 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6024<LI>Call Chain = str_char &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>writer</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = writer &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.text)
</UL>
<P><STRONG><a name="[f8]"></a>str_dump</STRONG> (Thumb, 82 bytes, Stack size 4176 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5984<LI>Call Chain = str_dump &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_dump
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[419]"></a>check_capture</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = check_capture &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_capture
</UL>

<P><STRONG><a name="[41a]"></a>capture_to_close</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = capture_to_close &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_capture
</UL>

<P><STRONG><a name="[41b]"></a>classend</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = classend &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[41c]"></a>match_class</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = match_class
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbracketclass
</UL>

<P><STRONG><a name="[41d]"></a>matchbracketclass</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = matchbracketclass &rArr; match_class
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
</UL>

<P><STRONG><a name="[41e]"></a>singlematch</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = singlematch &rArr; matchbracketclass &rArr; match_class
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbracketclass
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_expand
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_expand
</UL>

<P><STRONG><a name="[41f]"></a>matchbalance</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = matchbalance &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[420]"></a>min_expand</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = min_expand &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[422]"></a>match_capture</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = match_capture &rArr; check_capture &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_capture
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[423]"></a>end_capture</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544 + In Cycle
<LI>Call Chain = end_capture &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capture_to_close
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[424]"></a>start_capture</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + In Cycle
<LI>Call Chain = start_capture &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[421]"></a>match</STRONG> (Thumb, 678 bytes, Stack size 24 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568 + In Cycle
<LI>Call Chain = match &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_expand
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_capture
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_capture
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_capture
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_expand
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbalance
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbracketclass
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;classend
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_expand
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_capture
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_capture
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_expand
</UL>

<P><STRONG><a name="[425]"></a>max_expand</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = max_expand &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[426]"></a>lmemfind</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lmemfind &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>

<P><STRONG><a name="[428]"></a>push_onecapture</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = push_onecapture &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
</UL>

<P><STRONG><a name="[429]"></a>push_captures</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = push_captures &rArr; push_onecapture &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>

<P><STRONG><a name="[42a]"></a>nospecials</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nospecials &rArr; strpbrk
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>

<P><STRONG><a name="[42c]"></a>prepstate</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prepstate
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>

<P><STRONG><a name="[42d]"></a>reprepstate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lstrlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>

<P><STRONG><a name="[42b]"></a>str_find_aux</STRONG> (Thumb, 462 bytes, Stack size 344 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2200<LI>Call Chain = str_find_aux &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reprepstate
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepstate
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nospecials
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmemfind
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelat
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_match
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find
</UL>

<P><STRONG><a name="[f9]"></a>str_find</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208<LI>Call Chain = str_find &rArr; str_find_aux &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>str_match</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208<LI>Call Chain = str_match &rArr; str_find_aux &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>gmatch_aux</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = gmatch_aux &rArr; match &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reprepstate
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.text)
</UL>
<P><STRONG><a name="[fb]"></a>gmatch</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = gmatch &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepstate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[42e]"></a>add_s</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = add_s &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[42f]"></a>add_value</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = add_value &rArr; add_s &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
</UL>

<P><STRONG><a name="[fc]"></a>str_gsub</STRONG> (Thumb, 566 bytes, Stack size 4456 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6312<LI>Call Chain = str_gsub &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reprepstate
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepstate
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[430]"></a>addquoted</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = addquoted &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[431]"></a>checkdp</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = checkdp
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[432]"></a>addliteral</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = addliteral &rArr; addquoted &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkdp
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[433]"></a>scanformat</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = scanformat &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[434]"></a>addlenmod</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = addlenmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[fa]"></a>str_format</STRONG> (Thumb, 832 bytes, Stack size 4200 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6032<LI>Call Chain = str_format &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addlenmod
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanformat
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[436]"></a>digit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lstrlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnum
</UL>

<P><STRONG><a name="[435]"></a>getnum</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getnum
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnumlimit
</UL>

<P><STRONG><a name="[437]"></a>getnumlimit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = getnumlimit &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnum
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
</UL>

<P><STRONG><a name="[43b]"></a>initheader</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lstrlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[438]"></a>getoption</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = getoption &rArr; getnumlimit &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnumlimit
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnum
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
</UL>

<P><STRONG><a name="[439]"></a>getdetails</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = getdetails &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[43a]"></a>packint</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = packint &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[43d]"></a>copywithendian</STRONG> (Thumb, 306 bytes, Stack size 12 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = copywithendian
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[104]"></a>str_pack</STRONG> (Thumb, 848 bytes, Stack size 4272 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6104<LI>Call Chain = str_pack &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copywithendian
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packint
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initheader
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>str_packsize</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = str_packsize &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initheader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[43e]"></a>unpackint</STRONG> (Thumb, 218 bytes, Stack size 64 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = unpackint &rArr; luaL_error &rArr; luaL_where &rArr; lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr; rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
</UL>

<P><STRONG><a name="[106]"></a>str_unpack</STRONG> (Thumb, 636 bytes, Stack size 104 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = str_unpack &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackint
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copywithendian
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initheader
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelat
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[43f]"></a>createmetatable</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lstrlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = createmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
</UL>

<P><STRONG><a name="[440]"></a>l_hashfloat</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = l_hashfloat &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>

<P><STRONG><a name="[442]"></a>mainposition</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mainposition &rArr; l_hashfloat &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hashlongstr
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
</UL>

<P><STRONG><a name="[444]"></a>arrayindex</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arrayindex
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
</UL>

<P><STRONG><a name="[443]"></a>findindex</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = findindex &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayindex
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
</UL>

<P><STRONG><a name="[44c]"></a>computesizes</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = computesizes
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
</UL>

<P><STRONG><a name="[445]"></a>countint</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = countint &rArr; arrayindex
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_ceillog2
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayindex
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numusehash
</UL>

<P><STRONG><a name="[44b]"></a>numusearray</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = numusearray
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
</UL>

<P><STRONG><a name="[447]"></a>numusehash</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = numusehash &rArr; countint &rArr; arrayindex
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
</UL>

<P><STRONG><a name="[448]"></a>setarrayvector</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = setarrayvector &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
</UL>

<P><STRONG><a name="[449]"></a>setnodevector</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = setnodevector &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_ceillog2
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
</UL>

<P><STRONG><a name="[44a]"></a>rehash</STRONG> (Thumb, 98 bytes, Stack size 160 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numusehash
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numusearray
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computesizes
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[44e]"></a>getfreepos</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ltable.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[44f]"></a>getgeneric</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
</UL>

<P><STRONG><a name="[452]"></a>unbound_search</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, ltable.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = unbound_search &rArr; luaH_getint
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
</UL>

<P><STRONG><a name="[453]"></a>checkfield</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ltablib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = checkfield &rArr; lua_rawget &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>

<P><STRONG><a name="[454]"></a>checktab</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ltablib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = checktab &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkfield
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
</UL>

<P><STRONG><a name="[108]"></a>tinsert</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ltablib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = tinsert &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>tremove</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ltablib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = tremove &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>tmove</STRONG> (Thumb, 398 bytes, Stack size 64 bytes, ltablib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = tmove &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[455]"></a>addfield</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ltablib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = addfield &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
</UL>

<P><STRONG><a name="[107]"></a>tconcat</STRONG> (Thumb, 364 bytes, Stack size 4192 bytes, ltablib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6048<LI>Call Chain = tconcat &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>pack</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ltablib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = pack &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>unpack</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ltablib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = unpack &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[456]"></a>l_randomizePivot</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, ltablib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = l_randomizePivot
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[457]"></a>set2</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ltablib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = set2 &rArr; lua_seti &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
</UL>

<P><STRONG><a name="[458]"></a>sort_comp</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ltablib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = sort_comp &rArr; lua_compare &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
</UL>

<P><STRONG><a name="[459]"></a>partition</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, ltablib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = partition &rArr; set2 &rArr; lua_seti &rArr; luaV_finishset &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaV_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set2
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[45b]"></a>choosePivot</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ltablib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = choosePivot
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[45a]"></a>auxsort</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, ltablib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696 + In Cycle
<LI>Call Chain = auxsort &rArr;  auxsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choosePivot
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set2
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_randomizePivot
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[10d]"></a>sort</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ltablib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = sort &rArr; checktab &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[45f]"></a>error</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lundump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksize
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>

<P><STRONG><a name="[460]"></a>LoadBlock</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lundump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCode
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInteger
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNumber
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>

<P><STRONG><a name="[462]"></a>LoadByte</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lundump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LoadByte &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksize
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUpvalues
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
</UL>

<P><STRONG><a name="[463]"></a>LoadInt</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lundump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LoadInt &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUpvalues
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCode
</UL>

<P><STRONG><a name="[464]"></a>LoadNumber</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lundump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LoadNumber &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[465]"></a>LoadInteger</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lundump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LoadInteger &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[466]"></a>LoadString</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, lundump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = LoadString &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[467]"></a>LoadCode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lundump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = LoadCode &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[468]"></a>LoadConstants</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, lundump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = LoadConstants &rArr; LoadString &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInteger
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNumber
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[469]"></a>LoadDebug</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, lundump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = LoadDebug &rArr; LoadString &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[46a]"></a>LoadUpvalues</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lundump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = LoadUpvalues &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[46b]"></a>LoadFunction</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lundump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = LoadFunction &rArr; LoadConstants &rArr; LoadString &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUpvalues
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCode
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
</UL>

<P><STRONG><a name="[46c]"></a>LoadProtos</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lundump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + In Cycle
<LI>Call Chain = LoadProtos &rArr;  LoadFunction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[46d]"></a>checkliteral</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, lundump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = checkliteral &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
</UL>

<P><STRONG><a name="[46e]"></a>fchecksize</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lundump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fchecksize &rArr; LoadByte &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
</UL>

<P><STRONG><a name="[46f]"></a>checkHeader</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, lundump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = checkHeader &rArr; fchecksize &rArr; LoadByte &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksize
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInteger
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNumber
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
</UL>

<P><STRONG><a name="[470]"></a>u_posrelat</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lutf8lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u_posrelat
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
</UL>

<P><STRONG><a name="[471]"></a>utf8_decode</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, lutf8lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = utf8_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
</UL>

<P><STRONG><a name="[111]"></a>utflen</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, lutf8lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = utflen &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_decode
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_posrelat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>codepoint</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, lutf8lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = codepoint &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_decode
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_posrelat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[472]"></a>pushutfchar</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lutf8lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = pushutfchar &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
</UL>

<P><STRONG><a name="[110]"></a>utfchar</STRONG> (Thumb, 78 bytes, Stack size 4176 bytes, lutf8lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6032<LI>Call Chain = utfchar &rArr; pushutfchar &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushutfchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>byteoffset</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, lutf8lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = byteoffset &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_posrelat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>iter_aux</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, lutf8lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = iter_aux &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.text)
</UL>
<P><STRONG><a name="[112]"></a>iter_codes</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lutf8lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = iter_codes &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[473]"></a>forlimit</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = forlimit &rArr; luaV_tointeger &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[474]"></a>l_strcmp</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = l_strcmp &rArr; strcoll &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
</UL>

<P><STRONG><a name="[476]"></a>LTintfloat</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LTintfloat &rArr; __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
</UL>

<P><STRONG><a name="[477]"></a>LEintfloat</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LEintfloat &rArr; __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
</UL>

<P><STRONG><a name="[478]"></a>LTnum</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LTnum &rArr; LEintfloat &rArr; __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
</UL>

<P><STRONG><a name="[479]"></a>LEnum</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LEnum &rArr; LEintfloat &rArr; __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
</UL>

<P><STRONG><a name="[47a]"></a>copy2buff</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = copy2buff
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
</UL>

<P><STRONG><a name="[47e]"></a>getcached</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getcached
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[47c]"></a>pushclosure</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, lvm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = pushclosure &rArr; luaF_newLclosure &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_findupval
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[4a6]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[493]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf
</UL>

<P><STRONG><a name="[4a8]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4a7]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7b]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[7c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[4a0]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__malloc$realloc
</UL>

<P><STRONG><a name="[487]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[48e]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
